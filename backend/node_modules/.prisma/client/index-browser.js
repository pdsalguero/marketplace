
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  isAdmin: 'isAdmin',
  status: 'status',
  createdAt: 'createdAt',
  lastLoginAt: 'lastLoginAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  userId: 'userId',
  displayName: 'displayName',
  phone: 'phone',
  avatarUrl: 'avatarUrl',
  about: 'about',
  provinceId: 'provinceId',
  cityId: 'cityId',
  addressText: 'addressText'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  country: 'country',
  name: 'name',
  slug: 'slug',
  parentId: 'parentId',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  parentId: 'parentId',
  level: 'level',
  isActive: 'isActive',
  sortOrder: 'sortOrder'
};

exports.Prisma.ListingScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  categoryId: 'categoryId',
  title: 'title',
  description: 'description',
  priceAmount: 'priceAmount',
  currency: 'currency',
  condition: 'condition',
  quantity: 'quantity',
  status: 'status',
  provinceId: 'provinceId',
  cityId: 'cityId',
  viewsCount: 'viewsCount',
  favoritesCount: 'favoritesCount',
  contactsCount: 'contactsCount',
  promotedUntil: 'promotedUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishedAt: 'publishedAt',
  expiresAt: 'expiresAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ListingMediaScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  url: 'url',
  position: 'position',
  width: 'width',
  height: 'height',
  mimeType: 'mimeType',
  createdAt: 'createdAt'
};

exports.Prisma.ListingAttributeDefScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  key: 'key',
  dataType: 'dataType',
  enumOptions: 'enumOptions',
  isRequired: 'isRequired',
  sortOrder: 'sortOrder'
};

exports.Prisma.ListingAttributeScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  attrDefId: 'attrDefId',
  valueText: 'valueText',
  valueNumber: 'valueNumber',
  valueBool: 'valueBool'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  userId: 'userId',
  listingId: 'listingId',
  createdAt: 'createdAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  buyerId: 'buyerId',
  sellerId: 'sellerId',
  lastMessageAt: 'lastMessageAt',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  body: 'body',
  mediaUrl: 'mediaUrl',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  targetType: 'targetType',
  targetId: 'targetId',
  reason: 'reason',
  detailsText: 'detailsText',
  status: 'status',
  createdAt: 'createdAt',
  closedAt: 'closedAt',
  adminId: 'adminId'
};

exports.Prisma.PromotionPlanScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  type: 'type',
  durationDays: 'durationDays',
  priceAmount: 'priceAmount',
  currency: 'currency',
  isActive: 'isActive',
  sortOrder: 'sortOrder'
};

exports.Prisma.PromotionOrderScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  listingId: 'listingId',
  planId: 'planId',
  status: 'status',
  subtotal: 'subtotal',
  tax: 'tax',
  total: 'total',
  currency: 'currency',
  createdAt: 'createdAt',
  paidAt: 'paidAt',
  externalRef: 'externalRef',
  metadata: 'metadata'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  promotionOrderId: 'promotionOrderId',
  provider: 'provider',
  providerPaymentId: 'providerPaymentId',
  status: 'status',
  amount: 'amount',
  currency: 'currency',
  receiptUrl: 'receiptUrl',
  rawPayload: 'rawPayload',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdSlotScalarFieldEnum = {
  id: 'id',
  code: 'code',
  placement: 'placement',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.AdImpressionScalarFieldEnum = {
  id: 'id',
  adSlotId: 'adSlotId',
  listingId: 'listingId',
  thirdPartyCampaignId: 'thirdPartyCampaignId',
  occurredAt: 'occurredAt',
  metadata: 'metadata'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  banned: 'banned'
};

exports.Condition = exports.$Enums.Condition = {
  new: 'new',
  used: 'used'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  draft: 'draft',
  pending: 'pending',
  active: 'active',
  paused: 'paused',
  rejected: 'rejected',
  expired: 'expired',
  sold_out: 'sold_out'
};

exports.ConversationStatus = exports.$Enums.ConversationStatus = {
  open: 'open',
  blocked: 'blocked',
  archived: 'archived'
};

exports.ReportTarget = exports.$Enums.ReportTarget = {
  listing: 'listing',
  user: 'user',
  message: 'message'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  open: 'open',
  reviewing: 'reviewing',
  closed: 'closed'
};

exports.PromotionType = exports.$Enums.PromotionType = {
  home_featured: 'home_featured',
  top_list: 'top_list',
  urgent_badge: 'urgent_badge'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  created: 'created',
  approved: 'approved',
  rejected: 'rejected',
  refunded: 'refunded',
  chargeback: 'chargeback'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  Location: 'Location',
  Category: 'Category',
  Listing: 'Listing',
  ListingMedia: 'ListingMedia',
  ListingAttributeDef: 'ListingAttributeDef',
  ListingAttribute: 'ListingAttribute',
  Favorite: 'Favorite',
  Conversation: 'Conversation',
  Message: 'Message',
  Report: 'Report',
  PromotionPlan: 'PromotionPlan',
  PromotionOrder: 'PromotionOrder',
  Payment: 'Payment',
  AdSlot: 'AdSlot',
  AdImpression: 'AdImpression'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
