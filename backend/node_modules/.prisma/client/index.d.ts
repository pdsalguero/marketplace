
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model CategoryNode
 * 
 */
export type CategoryNode = $Result.DefaultSelection<Prisma.$CategoryNodePayload>
/**
 * Model Ad
 * 
 */
export type Ad = $Result.DefaultSelection<Prisma.$AdPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Category: {
  AUTOS: 'AUTOS',
  INMUEBLES: 'INMUEBLES',
  ELECTRONICA: 'ELECTRONICA',
  HOGAR: 'HOGAR',
  EMPLEO: 'EMPLEO',
  SERVICIOS: 'SERVICIOS',
  MODA: 'MODA',
  MASCOTAS: 'MASCOTAS',
  OTROS: 'OTROS'
};

export type Category = (typeof Category)[keyof typeof Category]


export const Transmission: {
  MANUAL: 'MANUAL',
  AUTOMATIC: 'AUTOMATIC'
};

export type Transmission = (typeof Transmission)[keyof typeof Transmission]


export const Fuel: {
  GASOLINE: 'GASOLINE',
  DIESEL: 'DIESEL',
  EV: 'EV',
  HYBRID: 'HYBRID'
};

export type Fuel = (typeof Fuel)[keyof typeof Fuel]

}

export type Category = $Enums.Category

export const Category: typeof $Enums.Category

export type Transmission = $Enums.Transmission

export const Transmission: typeof $Enums.Transmission

export type Fuel = $Enums.Fuel

export const Fuel: typeof $Enums.Fuel

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categoryNode`: Exposes CRUD operations for the **CategoryNode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoryNodes
    * const categoryNodes = await prisma.categoryNode.findMany()
    * ```
    */
  get categoryNode(): Prisma.CategoryNodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ad`: Exposes CRUD operations for the **Ad** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ads
    * const ads = await prisma.ad.findMany()
    * ```
    */
  get ad(): Prisma.AdDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    CategoryNode: 'CategoryNode',
    Ad: 'Ad'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "categoryNode" | "ad"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      CategoryNode: {
        payload: Prisma.$CategoryNodePayload<ExtArgs>
        fields: Prisma.CategoryNodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryNodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryNodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload>
          }
          findFirst: {
            args: Prisma.CategoryNodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryNodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload>
          }
          findMany: {
            args: Prisma.CategoryNodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload>[]
          }
          create: {
            args: Prisma.CategoryNodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload>
          }
          createMany: {
            args: Prisma.CategoryNodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryNodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload>[]
          }
          delete: {
            args: Prisma.CategoryNodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload>
          }
          update: {
            args: Prisma.CategoryNodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload>
          }
          deleteMany: {
            args: Prisma.CategoryNodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryNodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryNodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload>[]
          }
          upsert: {
            args: Prisma.CategoryNodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryNodePayload>
          }
          aggregate: {
            args: Prisma.CategoryNodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoryNode>
          }
          groupBy: {
            args: Prisma.CategoryNodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryNodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryNodeCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryNodeCountAggregateOutputType> | number
          }
        }
      }
      Ad: {
        payload: Prisma.$AdPayload<ExtArgs>
        fields: Prisma.AdFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload>
          }
          findFirst: {
            args: Prisma.AdFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload>
          }
          findMany: {
            args: Prisma.AdFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload>[]
          }
          create: {
            args: Prisma.AdCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload>
          }
          createMany: {
            args: Prisma.AdCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload>[]
          }
          delete: {
            args: Prisma.AdDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload>
          }
          update: {
            args: Prisma.AdUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload>
          }
          deleteMany: {
            args: Prisma.AdDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload>[]
          }
          upsert: {
            args: Prisma.AdUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdPayload>
          }
          aggregate: {
            args: Prisma.AdAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAd>
          }
          groupBy: {
            args: Prisma.AdGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdCountArgs<ExtArgs>
            result: $Utils.Optional<AdCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    categoryNode?: CategoryNodeOmit
    ad?: AdOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    ads: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ads?: boolean | UserCountOutputTypeCountAdsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdWhereInput
  }


  /**
   * Count Type CategoryNodeCountOutputType
   */

  export type CategoryNodeCountOutputType = {
    children: number
    adsCategory: number
    adsSubcategory: number
  }

  export type CategoryNodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | CategoryNodeCountOutputTypeCountChildrenArgs
    adsCategory?: boolean | CategoryNodeCountOutputTypeCountAdsCategoryArgs
    adsSubcategory?: boolean | CategoryNodeCountOutputTypeCountAdsSubcategoryArgs
  }

  // Custom InputTypes
  /**
   * CategoryNodeCountOutputType without action
   */
  export type CategoryNodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNodeCountOutputType
     */
    select?: CategoryNodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryNodeCountOutputType without action
   */
  export type CategoryNodeCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryNodeWhereInput
  }

  /**
   * CategoryNodeCountOutputType without action
   */
  export type CategoryNodeCountOutputTypeCountAdsCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdWhereInput
  }

  /**
   * CategoryNodeCountOutputType without action
   */
  export type CategoryNodeCountOutputTypeCountAdsSubcategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    ads?: boolean | User$adsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ads?: boolean | User$adsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      ads: Prisma.$AdPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ads<T extends User$adsArgs<ExtArgs> = {}>(args?: Subset<T, User$adsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.ads
   */
  export type User$adsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    where?: AdWhereInput
    orderBy?: AdOrderByWithRelationInput | AdOrderByWithRelationInput[]
    cursor?: AdWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdScalarFieldEnum | AdScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model CategoryNode
   */

  export type AggregateCategoryNode = {
    _count: CategoryNodeCountAggregateOutputType | null
    _avg: CategoryNodeAvgAggregateOutputType | null
    _sum: CategoryNodeSumAggregateOutputType | null
    _min: CategoryNodeMinAggregateOutputType | null
    _max: CategoryNodeMaxAggregateOutputType | null
  }

  export type CategoryNodeAvgAggregateOutputType = {
    id: number | null
    parentId: number | null
    order: number | null
  }

  export type CategoryNodeSumAggregateOutputType = {
    id: number | null
    parentId: number | null
    order: number | null
  }

  export type CategoryNodeMinAggregateOutputType = {
    id: number | null
    key: string | null
    name: string | null
    parentId: number | null
    order: number | null
    active: boolean | null
  }

  export type CategoryNodeMaxAggregateOutputType = {
    id: number | null
    key: string | null
    name: string | null
    parentId: number | null
    order: number | null
    active: boolean | null
  }

  export type CategoryNodeCountAggregateOutputType = {
    id: number
    key: number
    name: number
    parentId: number
    order: number
    active: number
    _all: number
  }


  export type CategoryNodeAvgAggregateInputType = {
    id?: true
    parentId?: true
    order?: true
  }

  export type CategoryNodeSumAggregateInputType = {
    id?: true
    parentId?: true
    order?: true
  }

  export type CategoryNodeMinAggregateInputType = {
    id?: true
    key?: true
    name?: true
    parentId?: true
    order?: true
    active?: true
  }

  export type CategoryNodeMaxAggregateInputType = {
    id?: true
    key?: true
    name?: true
    parentId?: true
    order?: true
    active?: true
  }

  export type CategoryNodeCountAggregateInputType = {
    id?: true
    key?: true
    name?: true
    parentId?: true
    order?: true
    active?: true
    _all?: true
  }

  export type CategoryNodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoryNode to aggregate.
     */
    where?: CategoryNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryNodes to fetch.
     */
    orderBy?: CategoryNodeOrderByWithRelationInput | CategoryNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoryNodes
    **/
    _count?: true | CategoryNodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryNodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoryNodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryNodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryNodeMaxAggregateInputType
  }

  export type GetCategoryNodeAggregateType<T extends CategoryNodeAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoryNode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoryNode[P]>
      : GetScalarType<T[P], AggregateCategoryNode[P]>
  }




  export type CategoryNodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryNodeWhereInput
    orderBy?: CategoryNodeOrderByWithAggregationInput | CategoryNodeOrderByWithAggregationInput[]
    by: CategoryNodeScalarFieldEnum[] | CategoryNodeScalarFieldEnum
    having?: CategoryNodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryNodeCountAggregateInputType | true
    _avg?: CategoryNodeAvgAggregateInputType
    _sum?: CategoryNodeSumAggregateInputType
    _min?: CategoryNodeMinAggregateInputType
    _max?: CategoryNodeMaxAggregateInputType
  }

  export type CategoryNodeGroupByOutputType = {
    id: number
    key: string
    name: string
    parentId: number | null
    order: number
    active: boolean
    _count: CategoryNodeCountAggregateOutputType | null
    _avg: CategoryNodeAvgAggregateOutputType | null
    _sum: CategoryNodeSumAggregateOutputType | null
    _min: CategoryNodeMinAggregateOutputType | null
    _max: CategoryNodeMaxAggregateOutputType | null
  }

  type GetCategoryNodeGroupByPayload<T extends CategoryNodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryNodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryNodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryNodeGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryNodeGroupByOutputType[P]>
        }
      >
    >


  export type CategoryNodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    parentId?: boolean
    order?: boolean
    active?: boolean
    parent?: boolean | CategoryNode$parentArgs<ExtArgs>
    children?: boolean | CategoryNode$childrenArgs<ExtArgs>
    adsCategory?: boolean | CategoryNode$adsCategoryArgs<ExtArgs>
    adsSubcategory?: boolean | CategoryNode$adsSubcategoryArgs<ExtArgs>
    _count?: boolean | CategoryNodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoryNode"]>

  export type CategoryNodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    parentId?: boolean
    order?: boolean
    active?: boolean
    parent?: boolean | CategoryNode$parentArgs<ExtArgs>
  }, ExtArgs["result"]["categoryNode"]>

  export type CategoryNodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    parentId?: boolean
    order?: boolean
    active?: boolean
    parent?: boolean | CategoryNode$parentArgs<ExtArgs>
  }, ExtArgs["result"]["categoryNode"]>

  export type CategoryNodeSelectScalar = {
    id?: boolean
    key?: boolean
    name?: boolean
    parentId?: boolean
    order?: boolean
    active?: boolean
  }

  export type CategoryNodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "name" | "parentId" | "order" | "active", ExtArgs["result"]["categoryNode"]>
  export type CategoryNodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | CategoryNode$parentArgs<ExtArgs>
    children?: boolean | CategoryNode$childrenArgs<ExtArgs>
    adsCategory?: boolean | CategoryNode$adsCategoryArgs<ExtArgs>
    adsSubcategory?: boolean | CategoryNode$adsSubcategoryArgs<ExtArgs>
    _count?: boolean | CategoryNodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryNodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | CategoryNode$parentArgs<ExtArgs>
  }
  export type CategoryNodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | CategoryNode$parentArgs<ExtArgs>
  }

  export type $CategoryNodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CategoryNode"
    objects: {
      parent: Prisma.$CategoryNodePayload<ExtArgs> | null
      children: Prisma.$CategoryNodePayload<ExtArgs>[]
      adsCategory: Prisma.$AdPayload<ExtArgs>[]
      adsSubcategory: Prisma.$AdPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: string
      name: string
      parentId: number | null
      order: number
      active: boolean
    }, ExtArgs["result"]["categoryNode"]>
    composites: {}
  }

  type CategoryNodeGetPayload<S extends boolean | null | undefined | CategoryNodeDefaultArgs> = $Result.GetResult<Prisma.$CategoryNodePayload, S>

  type CategoryNodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryNodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryNodeCountAggregateInputType | true
    }

  export interface CategoryNodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CategoryNode'], meta: { name: 'CategoryNode' } }
    /**
     * Find zero or one CategoryNode that matches the filter.
     * @param {CategoryNodeFindUniqueArgs} args - Arguments to find a CategoryNode
     * @example
     * // Get one CategoryNode
     * const categoryNode = await prisma.categoryNode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryNodeFindUniqueArgs>(args: SelectSubset<T, CategoryNodeFindUniqueArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CategoryNode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryNodeFindUniqueOrThrowArgs} args - Arguments to find a CategoryNode
     * @example
     * // Get one CategoryNode
     * const categoryNode = await prisma.categoryNode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryNodeFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryNodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoryNode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryNodeFindFirstArgs} args - Arguments to find a CategoryNode
     * @example
     * // Get one CategoryNode
     * const categoryNode = await prisma.categoryNode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryNodeFindFirstArgs>(args?: SelectSubset<T, CategoryNodeFindFirstArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoryNode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryNodeFindFirstOrThrowArgs} args - Arguments to find a CategoryNode
     * @example
     * // Get one CategoryNode
     * const categoryNode = await prisma.categoryNode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryNodeFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryNodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CategoryNodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryNodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoryNodes
     * const categoryNodes = await prisma.categoryNode.findMany()
     * 
     * // Get first 10 CategoryNodes
     * const categoryNodes = await prisma.categoryNode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryNodeWithIdOnly = await prisma.categoryNode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryNodeFindManyArgs>(args?: SelectSubset<T, CategoryNodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CategoryNode.
     * @param {CategoryNodeCreateArgs} args - Arguments to create a CategoryNode.
     * @example
     * // Create one CategoryNode
     * const CategoryNode = await prisma.categoryNode.create({
     *   data: {
     *     // ... data to create a CategoryNode
     *   }
     * })
     * 
     */
    create<T extends CategoryNodeCreateArgs>(args: SelectSubset<T, CategoryNodeCreateArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CategoryNodes.
     * @param {CategoryNodeCreateManyArgs} args - Arguments to create many CategoryNodes.
     * @example
     * // Create many CategoryNodes
     * const categoryNode = await prisma.categoryNode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryNodeCreateManyArgs>(args?: SelectSubset<T, CategoryNodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CategoryNodes and returns the data saved in the database.
     * @param {CategoryNodeCreateManyAndReturnArgs} args - Arguments to create many CategoryNodes.
     * @example
     * // Create many CategoryNodes
     * const categoryNode = await prisma.categoryNode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CategoryNodes and only return the `id`
     * const categoryNodeWithIdOnly = await prisma.categoryNode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryNodeCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryNodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CategoryNode.
     * @param {CategoryNodeDeleteArgs} args - Arguments to delete one CategoryNode.
     * @example
     * // Delete one CategoryNode
     * const CategoryNode = await prisma.categoryNode.delete({
     *   where: {
     *     // ... filter to delete one CategoryNode
     *   }
     * })
     * 
     */
    delete<T extends CategoryNodeDeleteArgs>(args: SelectSubset<T, CategoryNodeDeleteArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CategoryNode.
     * @param {CategoryNodeUpdateArgs} args - Arguments to update one CategoryNode.
     * @example
     * // Update one CategoryNode
     * const categoryNode = await prisma.categoryNode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryNodeUpdateArgs>(args: SelectSubset<T, CategoryNodeUpdateArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CategoryNodes.
     * @param {CategoryNodeDeleteManyArgs} args - Arguments to filter CategoryNodes to delete.
     * @example
     * // Delete a few CategoryNodes
     * const { count } = await prisma.categoryNode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryNodeDeleteManyArgs>(args?: SelectSubset<T, CategoryNodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoryNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryNodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoryNodes
     * const categoryNode = await prisma.categoryNode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryNodeUpdateManyArgs>(args: SelectSubset<T, CategoryNodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoryNodes and returns the data updated in the database.
     * @param {CategoryNodeUpdateManyAndReturnArgs} args - Arguments to update many CategoryNodes.
     * @example
     * // Update many CategoryNodes
     * const categoryNode = await prisma.categoryNode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CategoryNodes and only return the `id`
     * const categoryNodeWithIdOnly = await prisma.categoryNode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryNodeUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryNodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CategoryNode.
     * @param {CategoryNodeUpsertArgs} args - Arguments to update or create a CategoryNode.
     * @example
     * // Update or create a CategoryNode
     * const categoryNode = await prisma.categoryNode.upsert({
     *   create: {
     *     // ... data to create a CategoryNode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoryNode we want to update
     *   }
     * })
     */
    upsert<T extends CategoryNodeUpsertArgs>(args: SelectSubset<T, CategoryNodeUpsertArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CategoryNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryNodeCountArgs} args - Arguments to filter CategoryNodes to count.
     * @example
     * // Count the number of CategoryNodes
     * const count = await prisma.categoryNode.count({
     *   where: {
     *     // ... the filter for the CategoryNodes we want to count
     *   }
     * })
    **/
    count<T extends CategoryNodeCountArgs>(
      args?: Subset<T, CategoryNodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryNodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoryNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryNodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryNodeAggregateArgs>(args: Subset<T, CategoryNodeAggregateArgs>): Prisma.PrismaPromise<GetCategoryNodeAggregateType<T>>

    /**
     * Group by CategoryNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryNodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryNodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryNodeGroupByArgs['orderBy'] }
        : { orderBy?: CategoryNodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryNodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryNodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CategoryNode model
   */
  readonly fields: CategoryNodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoryNode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryNodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends CategoryNode$parentArgs<ExtArgs> = {}>(args?: Subset<T, CategoryNode$parentArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends CategoryNode$childrenArgs<ExtArgs> = {}>(args?: Subset<T, CategoryNode$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adsCategory<T extends CategoryNode$adsCategoryArgs<ExtArgs> = {}>(args?: Subset<T, CategoryNode$adsCategoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adsSubcategory<T extends CategoryNode$adsSubcategoryArgs<ExtArgs> = {}>(args?: Subset<T, CategoryNode$adsSubcategoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CategoryNode model
   */
  interface CategoryNodeFieldRefs {
    readonly id: FieldRef<"CategoryNode", 'Int'>
    readonly key: FieldRef<"CategoryNode", 'String'>
    readonly name: FieldRef<"CategoryNode", 'String'>
    readonly parentId: FieldRef<"CategoryNode", 'Int'>
    readonly order: FieldRef<"CategoryNode", 'Int'>
    readonly active: FieldRef<"CategoryNode", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * CategoryNode findUnique
   */
  export type CategoryNodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    /**
     * Filter, which CategoryNode to fetch.
     */
    where: CategoryNodeWhereUniqueInput
  }

  /**
   * CategoryNode findUniqueOrThrow
   */
  export type CategoryNodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    /**
     * Filter, which CategoryNode to fetch.
     */
    where: CategoryNodeWhereUniqueInput
  }

  /**
   * CategoryNode findFirst
   */
  export type CategoryNodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    /**
     * Filter, which CategoryNode to fetch.
     */
    where?: CategoryNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryNodes to fetch.
     */
    orderBy?: CategoryNodeOrderByWithRelationInput | CategoryNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryNodes.
     */
    cursor?: CategoryNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryNodes.
     */
    distinct?: CategoryNodeScalarFieldEnum | CategoryNodeScalarFieldEnum[]
  }

  /**
   * CategoryNode findFirstOrThrow
   */
  export type CategoryNodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    /**
     * Filter, which CategoryNode to fetch.
     */
    where?: CategoryNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryNodes to fetch.
     */
    orderBy?: CategoryNodeOrderByWithRelationInput | CategoryNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryNodes.
     */
    cursor?: CategoryNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryNodes.
     */
    distinct?: CategoryNodeScalarFieldEnum | CategoryNodeScalarFieldEnum[]
  }

  /**
   * CategoryNode findMany
   */
  export type CategoryNodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    /**
     * Filter, which CategoryNodes to fetch.
     */
    where?: CategoryNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryNodes to fetch.
     */
    orderBy?: CategoryNodeOrderByWithRelationInput | CategoryNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoryNodes.
     */
    cursor?: CategoryNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryNodes.
     */
    skip?: number
    distinct?: CategoryNodeScalarFieldEnum | CategoryNodeScalarFieldEnum[]
  }

  /**
   * CategoryNode create
   */
  export type CategoryNodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    /**
     * The data needed to create a CategoryNode.
     */
    data: XOR<CategoryNodeCreateInput, CategoryNodeUncheckedCreateInput>
  }

  /**
   * CategoryNode createMany
   */
  export type CategoryNodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CategoryNodes.
     */
    data: CategoryNodeCreateManyInput | CategoryNodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CategoryNode createManyAndReturn
   */
  export type CategoryNodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * The data used to create many CategoryNodes.
     */
    data: CategoryNodeCreateManyInput | CategoryNodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CategoryNode update
   */
  export type CategoryNodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    /**
     * The data needed to update a CategoryNode.
     */
    data: XOR<CategoryNodeUpdateInput, CategoryNodeUncheckedUpdateInput>
    /**
     * Choose, which CategoryNode to update.
     */
    where: CategoryNodeWhereUniqueInput
  }

  /**
   * CategoryNode updateMany
   */
  export type CategoryNodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CategoryNodes.
     */
    data: XOR<CategoryNodeUpdateManyMutationInput, CategoryNodeUncheckedUpdateManyInput>
    /**
     * Filter which CategoryNodes to update
     */
    where?: CategoryNodeWhereInput
    /**
     * Limit how many CategoryNodes to update.
     */
    limit?: number
  }

  /**
   * CategoryNode updateManyAndReturn
   */
  export type CategoryNodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * The data used to update CategoryNodes.
     */
    data: XOR<CategoryNodeUpdateManyMutationInput, CategoryNodeUncheckedUpdateManyInput>
    /**
     * Filter which CategoryNodes to update
     */
    where?: CategoryNodeWhereInput
    /**
     * Limit how many CategoryNodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CategoryNode upsert
   */
  export type CategoryNodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    /**
     * The filter to search for the CategoryNode to update in case it exists.
     */
    where: CategoryNodeWhereUniqueInput
    /**
     * In case the CategoryNode found by the `where` argument doesn't exist, create a new CategoryNode with this data.
     */
    create: XOR<CategoryNodeCreateInput, CategoryNodeUncheckedCreateInput>
    /**
     * In case the CategoryNode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryNodeUpdateInput, CategoryNodeUncheckedUpdateInput>
  }

  /**
   * CategoryNode delete
   */
  export type CategoryNodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    /**
     * Filter which CategoryNode to delete.
     */
    where: CategoryNodeWhereUniqueInput
  }

  /**
   * CategoryNode deleteMany
   */
  export type CategoryNodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoryNodes to delete
     */
    where?: CategoryNodeWhereInput
    /**
     * Limit how many CategoryNodes to delete.
     */
    limit?: number
  }

  /**
   * CategoryNode.parent
   */
  export type CategoryNode$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    where?: CategoryNodeWhereInput
  }

  /**
   * CategoryNode.children
   */
  export type CategoryNode$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    where?: CategoryNodeWhereInput
    orderBy?: CategoryNodeOrderByWithRelationInput | CategoryNodeOrderByWithRelationInput[]
    cursor?: CategoryNodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryNodeScalarFieldEnum | CategoryNodeScalarFieldEnum[]
  }

  /**
   * CategoryNode.adsCategory
   */
  export type CategoryNode$adsCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    where?: AdWhereInput
    orderBy?: AdOrderByWithRelationInput | AdOrderByWithRelationInput[]
    cursor?: AdWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdScalarFieldEnum | AdScalarFieldEnum[]
  }

  /**
   * CategoryNode.adsSubcategory
   */
  export type CategoryNode$adsSubcategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    where?: AdWhereInput
    orderBy?: AdOrderByWithRelationInput | AdOrderByWithRelationInput[]
    cursor?: AdWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdScalarFieldEnum | AdScalarFieldEnum[]
  }

  /**
   * CategoryNode without action
   */
  export type CategoryNodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
  }


  /**
   * Model Ad
   */

  export type AggregateAd = {
    _count: AdCountAggregateOutputType | null
    _avg: AdAvgAggregateOutputType | null
    _sum: AdSumAggregateOutputType | null
    _min: AdMinAggregateOutputType | null
    _max: AdMaxAggregateOutputType | null
  }

  export type AdAvgAggregateOutputType = {
    id: number | null
    price: number | null
    categoryId: number | null
    subcategoryId: number | null
    year: number | null
    mileage: number | null
    userId: number | null
  }

  export type AdSumAggregateOutputType = {
    id: number | null
    price: number | null
    categoryId: number | null
    subcategoryId: number | null
    year: number | null
    mileage: number | null
    userId: number | null
  }

  export type AdMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    price: number | null
    imageKey: string | null
    category: $Enums.Category | null
    subcategory: string | null
    categoryId: number | null
    subcategoryId: number | null
    brand: string | null
    model: string | null
    year: number | null
    mileage: number | null
    transmission: $Enums.Transmission | null
    fuel: $Enums.Fuel | null
    location: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    price: number | null
    imageKey: string | null
    category: $Enums.Category | null
    subcategory: string | null
    categoryId: number | null
    subcategoryId: number | null
    brand: string | null
    model: string | null
    year: number | null
    mileage: number | null
    transmission: $Enums.Transmission | null
    fuel: $Enums.Fuel | null
    location: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdCountAggregateOutputType = {
    id: number
    title: number
    description: number
    price: number
    imageKey: number
    imageKeys: number
    category: number
    subcategory: number
    categoryId: number
    subcategoryId: number
    brand: number
    model: number
    year: number
    mileage: number
    transmission: number
    fuel: number
    location: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdAvgAggregateInputType = {
    id?: true
    price?: true
    categoryId?: true
    subcategoryId?: true
    year?: true
    mileage?: true
    userId?: true
  }

  export type AdSumAggregateInputType = {
    id?: true
    price?: true
    categoryId?: true
    subcategoryId?: true
    year?: true
    mileage?: true
    userId?: true
  }

  export type AdMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    imageKey?: true
    category?: true
    subcategory?: true
    categoryId?: true
    subcategoryId?: true
    brand?: true
    model?: true
    year?: true
    mileage?: true
    transmission?: true
    fuel?: true
    location?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    imageKey?: true
    category?: true
    subcategory?: true
    categoryId?: true
    subcategoryId?: true
    brand?: true
    model?: true
    year?: true
    mileage?: true
    transmission?: true
    fuel?: true
    location?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    imageKey?: true
    imageKeys?: true
    category?: true
    subcategory?: true
    categoryId?: true
    subcategoryId?: true
    brand?: true
    model?: true
    year?: true
    mileage?: true
    transmission?: true
    fuel?: true
    location?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ad to aggregate.
     */
    where?: AdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ads to fetch.
     */
    orderBy?: AdOrderByWithRelationInput | AdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ads
    **/
    _count?: true | AdCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdMaxAggregateInputType
  }

  export type GetAdAggregateType<T extends AdAggregateArgs> = {
        [P in keyof T & keyof AggregateAd]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAd[P]>
      : GetScalarType<T[P], AggregateAd[P]>
  }




  export type AdGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdWhereInput
    orderBy?: AdOrderByWithAggregationInput | AdOrderByWithAggregationInput[]
    by: AdScalarFieldEnum[] | AdScalarFieldEnum
    having?: AdScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdCountAggregateInputType | true
    _avg?: AdAvgAggregateInputType
    _sum?: AdSumAggregateInputType
    _min?: AdMinAggregateInputType
    _max?: AdMaxAggregateInputType
  }

  export type AdGroupByOutputType = {
    id: number
    title: string
    description: string
    price: number
    imageKey: string | null
    imageKeys: JsonValue | null
    category: $Enums.Category
    subcategory: string | null
    categoryId: number | null
    subcategoryId: number | null
    brand: string | null
    model: string | null
    year: number | null
    mileage: number | null
    transmission: $Enums.Transmission | null
    fuel: $Enums.Fuel | null
    location: string | null
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: AdCountAggregateOutputType | null
    _avg: AdAvgAggregateOutputType | null
    _sum: AdSumAggregateOutputType | null
    _min: AdMinAggregateOutputType | null
    _max: AdMaxAggregateOutputType | null
  }

  type GetAdGroupByPayload<T extends AdGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdGroupByOutputType[P]>
            : GetScalarType<T[P], AdGroupByOutputType[P]>
        }
      >
    >


  export type AdSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    imageKey?: boolean
    imageKeys?: boolean
    category?: boolean
    subcategory?: boolean
    categoryId?: boolean
    subcategoryId?: boolean
    brand?: boolean
    model?: boolean
    year?: boolean
    mileage?: boolean
    transmission?: boolean
    fuel?: boolean
    location?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryRef?: boolean | Ad$categoryRefArgs<ExtArgs>
    subcategoryRef?: boolean | Ad$subcategoryRefArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ad"]>

  export type AdSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    imageKey?: boolean
    imageKeys?: boolean
    category?: boolean
    subcategory?: boolean
    categoryId?: boolean
    subcategoryId?: boolean
    brand?: boolean
    model?: boolean
    year?: boolean
    mileage?: boolean
    transmission?: boolean
    fuel?: boolean
    location?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryRef?: boolean | Ad$categoryRefArgs<ExtArgs>
    subcategoryRef?: boolean | Ad$subcategoryRefArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ad"]>

  export type AdSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    imageKey?: boolean
    imageKeys?: boolean
    category?: boolean
    subcategory?: boolean
    categoryId?: boolean
    subcategoryId?: boolean
    brand?: boolean
    model?: boolean
    year?: boolean
    mileage?: boolean
    transmission?: boolean
    fuel?: boolean
    location?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryRef?: boolean | Ad$categoryRefArgs<ExtArgs>
    subcategoryRef?: boolean | Ad$subcategoryRefArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ad"]>

  export type AdSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    imageKey?: boolean
    imageKeys?: boolean
    category?: boolean
    subcategory?: boolean
    categoryId?: boolean
    subcategoryId?: boolean
    brand?: boolean
    model?: boolean
    year?: boolean
    mileage?: boolean
    transmission?: boolean
    fuel?: boolean
    location?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AdOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "price" | "imageKey" | "imageKeys" | "category" | "subcategory" | "categoryId" | "subcategoryId" | "brand" | "model" | "year" | "mileage" | "transmission" | "fuel" | "location" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["ad"]>
  export type AdInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoryRef?: boolean | Ad$categoryRefArgs<ExtArgs>
    subcategoryRef?: boolean | Ad$subcategoryRefArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoryRef?: boolean | Ad$categoryRefArgs<ExtArgs>
    subcategoryRef?: boolean | Ad$subcategoryRefArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoryRef?: boolean | Ad$categoryRefArgs<ExtArgs>
    subcategoryRef?: boolean | Ad$subcategoryRefArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ad"
    objects: {
      categoryRef: Prisma.$CategoryNodePayload<ExtArgs> | null
      subcategoryRef: Prisma.$CategoryNodePayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      price: number
      imageKey: string | null
      imageKeys: Prisma.JsonValue | null
      category: $Enums.Category
      subcategory: string | null
      categoryId: number | null
      subcategoryId: number | null
      brand: string | null
      model: string | null
      year: number | null
      mileage: number | null
      transmission: $Enums.Transmission | null
      fuel: $Enums.Fuel | null
      location: string | null
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ad"]>
    composites: {}
  }

  type AdGetPayload<S extends boolean | null | undefined | AdDefaultArgs> = $Result.GetResult<Prisma.$AdPayload, S>

  type AdCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdCountAggregateInputType | true
    }

  export interface AdDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ad'], meta: { name: 'Ad' } }
    /**
     * Find zero or one Ad that matches the filter.
     * @param {AdFindUniqueArgs} args - Arguments to find a Ad
     * @example
     * // Get one Ad
     * const ad = await prisma.ad.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdFindUniqueArgs>(args: SelectSubset<T, AdFindUniqueArgs<ExtArgs>>): Prisma__AdClient<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ad that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdFindUniqueOrThrowArgs} args - Arguments to find a Ad
     * @example
     * // Get one Ad
     * const ad = await prisma.ad.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdFindUniqueOrThrowArgs>(args: SelectSubset<T, AdFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdClient<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ad that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdFindFirstArgs} args - Arguments to find a Ad
     * @example
     * // Get one Ad
     * const ad = await prisma.ad.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdFindFirstArgs>(args?: SelectSubset<T, AdFindFirstArgs<ExtArgs>>): Prisma__AdClient<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ad that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdFindFirstOrThrowArgs} args - Arguments to find a Ad
     * @example
     * // Get one Ad
     * const ad = await prisma.ad.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdFindFirstOrThrowArgs>(args?: SelectSubset<T, AdFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdClient<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ads
     * const ads = await prisma.ad.findMany()
     * 
     * // Get first 10 Ads
     * const ads = await prisma.ad.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adWithIdOnly = await prisma.ad.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdFindManyArgs>(args?: SelectSubset<T, AdFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ad.
     * @param {AdCreateArgs} args - Arguments to create a Ad.
     * @example
     * // Create one Ad
     * const Ad = await prisma.ad.create({
     *   data: {
     *     // ... data to create a Ad
     *   }
     * })
     * 
     */
    create<T extends AdCreateArgs>(args: SelectSubset<T, AdCreateArgs<ExtArgs>>): Prisma__AdClient<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ads.
     * @param {AdCreateManyArgs} args - Arguments to create many Ads.
     * @example
     * // Create many Ads
     * const ad = await prisma.ad.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdCreateManyArgs>(args?: SelectSubset<T, AdCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ads and returns the data saved in the database.
     * @param {AdCreateManyAndReturnArgs} args - Arguments to create many Ads.
     * @example
     * // Create many Ads
     * const ad = await prisma.ad.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ads and only return the `id`
     * const adWithIdOnly = await prisma.ad.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdCreateManyAndReturnArgs>(args?: SelectSubset<T, AdCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ad.
     * @param {AdDeleteArgs} args - Arguments to delete one Ad.
     * @example
     * // Delete one Ad
     * const Ad = await prisma.ad.delete({
     *   where: {
     *     // ... filter to delete one Ad
     *   }
     * })
     * 
     */
    delete<T extends AdDeleteArgs>(args: SelectSubset<T, AdDeleteArgs<ExtArgs>>): Prisma__AdClient<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ad.
     * @param {AdUpdateArgs} args - Arguments to update one Ad.
     * @example
     * // Update one Ad
     * const ad = await prisma.ad.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdUpdateArgs>(args: SelectSubset<T, AdUpdateArgs<ExtArgs>>): Prisma__AdClient<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ads.
     * @param {AdDeleteManyArgs} args - Arguments to filter Ads to delete.
     * @example
     * // Delete a few Ads
     * const { count } = await prisma.ad.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdDeleteManyArgs>(args?: SelectSubset<T, AdDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ads
     * const ad = await prisma.ad.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdUpdateManyArgs>(args: SelectSubset<T, AdUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ads and returns the data updated in the database.
     * @param {AdUpdateManyAndReturnArgs} args - Arguments to update many Ads.
     * @example
     * // Update many Ads
     * const ad = await prisma.ad.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ads and only return the `id`
     * const adWithIdOnly = await prisma.ad.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdUpdateManyAndReturnArgs>(args: SelectSubset<T, AdUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ad.
     * @param {AdUpsertArgs} args - Arguments to update or create a Ad.
     * @example
     * // Update or create a Ad
     * const ad = await prisma.ad.upsert({
     *   create: {
     *     // ... data to create a Ad
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ad we want to update
     *   }
     * })
     */
    upsert<T extends AdUpsertArgs>(args: SelectSubset<T, AdUpsertArgs<ExtArgs>>): Prisma__AdClient<$Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdCountArgs} args - Arguments to filter Ads to count.
     * @example
     * // Count the number of Ads
     * const count = await prisma.ad.count({
     *   where: {
     *     // ... the filter for the Ads we want to count
     *   }
     * })
    **/
    count<T extends AdCountArgs>(
      args?: Subset<T, AdCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdAggregateArgs>(args: Subset<T, AdAggregateArgs>): Prisma.PrismaPromise<GetAdAggregateType<T>>

    /**
     * Group by Ad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdGroupByArgs['orderBy'] }
        : { orderBy?: AdGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ad model
   */
  readonly fields: AdFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ad.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categoryRef<T extends Ad$categoryRefArgs<ExtArgs> = {}>(args?: Subset<T, Ad$categoryRefArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subcategoryRef<T extends Ad$subcategoryRefArgs<ExtArgs> = {}>(args?: Subset<T, Ad$subcategoryRefArgs<ExtArgs>>): Prisma__CategoryNodeClient<$Result.GetResult<Prisma.$CategoryNodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ad model
   */
  interface AdFieldRefs {
    readonly id: FieldRef<"Ad", 'Int'>
    readonly title: FieldRef<"Ad", 'String'>
    readonly description: FieldRef<"Ad", 'String'>
    readonly price: FieldRef<"Ad", 'Float'>
    readonly imageKey: FieldRef<"Ad", 'String'>
    readonly imageKeys: FieldRef<"Ad", 'Json'>
    readonly category: FieldRef<"Ad", 'Category'>
    readonly subcategory: FieldRef<"Ad", 'String'>
    readonly categoryId: FieldRef<"Ad", 'Int'>
    readonly subcategoryId: FieldRef<"Ad", 'Int'>
    readonly brand: FieldRef<"Ad", 'String'>
    readonly model: FieldRef<"Ad", 'String'>
    readonly year: FieldRef<"Ad", 'Int'>
    readonly mileage: FieldRef<"Ad", 'Int'>
    readonly transmission: FieldRef<"Ad", 'Transmission'>
    readonly fuel: FieldRef<"Ad", 'Fuel'>
    readonly location: FieldRef<"Ad", 'String'>
    readonly userId: FieldRef<"Ad", 'Int'>
    readonly createdAt: FieldRef<"Ad", 'DateTime'>
    readonly updatedAt: FieldRef<"Ad", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ad findUnique
   */
  export type AdFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    /**
     * Filter, which Ad to fetch.
     */
    where: AdWhereUniqueInput
  }

  /**
   * Ad findUniqueOrThrow
   */
  export type AdFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    /**
     * Filter, which Ad to fetch.
     */
    where: AdWhereUniqueInput
  }

  /**
   * Ad findFirst
   */
  export type AdFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    /**
     * Filter, which Ad to fetch.
     */
    where?: AdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ads to fetch.
     */
    orderBy?: AdOrderByWithRelationInput | AdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ads.
     */
    cursor?: AdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ads.
     */
    distinct?: AdScalarFieldEnum | AdScalarFieldEnum[]
  }

  /**
   * Ad findFirstOrThrow
   */
  export type AdFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    /**
     * Filter, which Ad to fetch.
     */
    where?: AdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ads to fetch.
     */
    orderBy?: AdOrderByWithRelationInput | AdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ads.
     */
    cursor?: AdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ads.
     */
    distinct?: AdScalarFieldEnum | AdScalarFieldEnum[]
  }

  /**
   * Ad findMany
   */
  export type AdFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    /**
     * Filter, which Ads to fetch.
     */
    where?: AdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ads to fetch.
     */
    orderBy?: AdOrderByWithRelationInput | AdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ads.
     */
    cursor?: AdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ads.
     */
    skip?: number
    distinct?: AdScalarFieldEnum | AdScalarFieldEnum[]
  }

  /**
   * Ad create
   */
  export type AdCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    /**
     * The data needed to create a Ad.
     */
    data: XOR<AdCreateInput, AdUncheckedCreateInput>
  }

  /**
   * Ad createMany
   */
  export type AdCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ads.
     */
    data: AdCreateManyInput | AdCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ad createManyAndReturn
   */
  export type AdCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * The data used to create many Ads.
     */
    data: AdCreateManyInput | AdCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ad update
   */
  export type AdUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    /**
     * The data needed to update a Ad.
     */
    data: XOR<AdUpdateInput, AdUncheckedUpdateInput>
    /**
     * Choose, which Ad to update.
     */
    where: AdWhereUniqueInput
  }

  /**
   * Ad updateMany
   */
  export type AdUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ads.
     */
    data: XOR<AdUpdateManyMutationInput, AdUncheckedUpdateManyInput>
    /**
     * Filter which Ads to update
     */
    where?: AdWhereInput
    /**
     * Limit how many Ads to update.
     */
    limit?: number
  }

  /**
   * Ad updateManyAndReturn
   */
  export type AdUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * The data used to update Ads.
     */
    data: XOR<AdUpdateManyMutationInput, AdUncheckedUpdateManyInput>
    /**
     * Filter which Ads to update
     */
    where?: AdWhereInput
    /**
     * Limit how many Ads to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ad upsert
   */
  export type AdUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    /**
     * The filter to search for the Ad to update in case it exists.
     */
    where: AdWhereUniqueInput
    /**
     * In case the Ad found by the `where` argument doesn't exist, create a new Ad with this data.
     */
    create: XOR<AdCreateInput, AdUncheckedCreateInput>
    /**
     * In case the Ad was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdUpdateInput, AdUncheckedUpdateInput>
  }

  /**
   * Ad delete
   */
  export type AdDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
    /**
     * Filter which Ad to delete.
     */
    where: AdWhereUniqueInput
  }

  /**
   * Ad deleteMany
   */
  export type AdDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ads to delete
     */
    where?: AdWhereInput
    /**
     * Limit how many Ads to delete.
     */
    limit?: number
  }

  /**
   * Ad.categoryRef
   */
  export type Ad$categoryRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    where?: CategoryNodeWhereInput
  }

  /**
   * Ad.subcategoryRef
   */
  export type Ad$subcategoryRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryNode
     */
    select?: CategoryNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryNode
     */
    omit?: CategoryNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryNodeInclude<ExtArgs> | null
    where?: CategoryNodeWhereInput
  }

  /**
   * Ad without action
   */
  export type AdDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ad
     */
    select?: AdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ad
     */
    omit?: AdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryNodeScalarFieldEnum: {
    id: 'id',
    key: 'key',
    name: 'name',
    parentId: 'parentId',
    order: 'order',
    active: 'active'
  };

  export type CategoryNodeScalarFieldEnum = (typeof CategoryNodeScalarFieldEnum)[keyof typeof CategoryNodeScalarFieldEnum]


  export const AdScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    price: 'price',
    imageKey: 'imageKey',
    imageKeys: 'imageKeys',
    category: 'category',
    subcategory: 'subcategory',
    categoryId: 'categoryId',
    subcategoryId: 'subcategoryId',
    brand: 'brand',
    model: 'model',
    year: 'year',
    mileage: 'mileage',
    transmission: 'transmission',
    fuel: 'fuel',
    location: 'location',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdScalarFieldEnum = (typeof AdScalarFieldEnum)[keyof typeof AdScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Category'
   */
  export type EnumCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Category'>
    


  /**
   * Reference to a field of type 'Category[]'
   */
  export type ListEnumCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Category[]'>
    


  /**
   * Reference to a field of type 'Transmission'
   */
  export type EnumTransmissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Transmission'>
    


  /**
   * Reference to a field of type 'Transmission[]'
   */
  export type ListEnumTransmissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Transmission[]'>
    


  /**
   * Reference to a field of type 'Fuel'
   */
  export type EnumFuelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Fuel'>
    


  /**
   * Reference to a field of type 'Fuel[]'
   */
  export type ListEnumFuelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Fuel[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    ads?: AdListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    ads?: AdOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    ads?: AdListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CategoryNodeWhereInput = {
    AND?: CategoryNodeWhereInput | CategoryNodeWhereInput[]
    OR?: CategoryNodeWhereInput[]
    NOT?: CategoryNodeWhereInput | CategoryNodeWhereInput[]
    id?: IntFilter<"CategoryNode"> | number
    key?: StringFilter<"CategoryNode"> | string
    name?: StringFilter<"CategoryNode"> | string
    parentId?: IntNullableFilter<"CategoryNode"> | number | null
    order?: IntFilter<"CategoryNode"> | number
    active?: BoolFilter<"CategoryNode"> | boolean
    parent?: XOR<CategoryNodeNullableScalarRelationFilter, CategoryNodeWhereInput> | null
    children?: CategoryNodeListRelationFilter
    adsCategory?: AdListRelationFilter
    adsSubcategory?: AdListRelationFilter
  }

  export type CategoryNodeOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    parentId?: SortOrderInput | SortOrder
    order?: SortOrder
    active?: SortOrder
    parent?: CategoryNodeOrderByWithRelationInput
    children?: CategoryNodeOrderByRelationAggregateInput
    adsCategory?: AdOrderByRelationAggregateInput
    adsSubcategory?: AdOrderByRelationAggregateInput
  }

  export type CategoryNodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    key?: string
    AND?: CategoryNodeWhereInput | CategoryNodeWhereInput[]
    OR?: CategoryNodeWhereInput[]
    NOT?: CategoryNodeWhereInput | CategoryNodeWhereInput[]
    name?: StringFilter<"CategoryNode"> | string
    parentId?: IntNullableFilter<"CategoryNode"> | number | null
    order?: IntFilter<"CategoryNode"> | number
    active?: BoolFilter<"CategoryNode"> | boolean
    parent?: XOR<CategoryNodeNullableScalarRelationFilter, CategoryNodeWhereInput> | null
    children?: CategoryNodeListRelationFilter
    adsCategory?: AdListRelationFilter
    adsSubcategory?: AdListRelationFilter
  }, "id" | "key">

  export type CategoryNodeOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    parentId?: SortOrderInput | SortOrder
    order?: SortOrder
    active?: SortOrder
    _count?: CategoryNodeCountOrderByAggregateInput
    _avg?: CategoryNodeAvgOrderByAggregateInput
    _max?: CategoryNodeMaxOrderByAggregateInput
    _min?: CategoryNodeMinOrderByAggregateInput
    _sum?: CategoryNodeSumOrderByAggregateInput
  }

  export type CategoryNodeScalarWhereWithAggregatesInput = {
    AND?: CategoryNodeScalarWhereWithAggregatesInput | CategoryNodeScalarWhereWithAggregatesInput[]
    OR?: CategoryNodeScalarWhereWithAggregatesInput[]
    NOT?: CategoryNodeScalarWhereWithAggregatesInput | CategoryNodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CategoryNode"> | number
    key?: StringWithAggregatesFilter<"CategoryNode"> | string
    name?: StringWithAggregatesFilter<"CategoryNode"> | string
    parentId?: IntNullableWithAggregatesFilter<"CategoryNode"> | number | null
    order?: IntWithAggregatesFilter<"CategoryNode"> | number
    active?: BoolWithAggregatesFilter<"CategoryNode"> | boolean
  }

  export type AdWhereInput = {
    AND?: AdWhereInput | AdWhereInput[]
    OR?: AdWhereInput[]
    NOT?: AdWhereInput | AdWhereInput[]
    id?: IntFilter<"Ad"> | number
    title?: StringFilter<"Ad"> | string
    description?: StringFilter<"Ad"> | string
    price?: FloatFilter<"Ad"> | number
    imageKey?: StringNullableFilter<"Ad"> | string | null
    imageKeys?: JsonNullableFilter<"Ad">
    category?: EnumCategoryFilter<"Ad"> | $Enums.Category
    subcategory?: StringNullableFilter<"Ad"> | string | null
    categoryId?: IntNullableFilter<"Ad"> | number | null
    subcategoryId?: IntNullableFilter<"Ad"> | number | null
    brand?: StringNullableFilter<"Ad"> | string | null
    model?: StringNullableFilter<"Ad"> | string | null
    year?: IntNullableFilter<"Ad"> | number | null
    mileage?: IntNullableFilter<"Ad"> | number | null
    transmission?: EnumTransmissionNullableFilter<"Ad"> | $Enums.Transmission | null
    fuel?: EnumFuelNullableFilter<"Ad"> | $Enums.Fuel | null
    location?: StringNullableFilter<"Ad"> | string | null
    userId?: IntFilter<"Ad"> | number
    createdAt?: DateTimeFilter<"Ad"> | Date | string
    updatedAt?: DateTimeFilter<"Ad"> | Date | string
    categoryRef?: XOR<CategoryNodeNullableScalarRelationFilter, CategoryNodeWhereInput> | null
    subcategoryRef?: XOR<CategoryNodeNullableScalarRelationFilter, CategoryNodeWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageKey?: SortOrderInput | SortOrder
    imageKeys?: SortOrderInput | SortOrder
    category?: SortOrder
    subcategory?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    subcategoryId?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    year?: SortOrderInput | SortOrder
    mileage?: SortOrderInput | SortOrder
    transmission?: SortOrderInput | SortOrder
    fuel?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryRef?: CategoryNodeOrderByWithRelationInput
    subcategoryRef?: CategoryNodeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AdWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AdWhereInput | AdWhereInput[]
    OR?: AdWhereInput[]
    NOT?: AdWhereInput | AdWhereInput[]
    title?: StringFilter<"Ad"> | string
    description?: StringFilter<"Ad"> | string
    price?: FloatFilter<"Ad"> | number
    imageKey?: StringNullableFilter<"Ad"> | string | null
    imageKeys?: JsonNullableFilter<"Ad">
    category?: EnumCategoryFilter<"Ad"> | $Enums.Category
    subcategory?: StringNullableFilter<"Ad"> | string | null
    categoryId?: IntNullableFilter<"Ad"> | number | null
    subcategoryId?: IntNullableFilter<"Ad"> | number | null
    brand?: StringNullableFilter<"Ad"> | string | null
    model?: StringNullableFilter<"Ad"> | string | null
    year?: IntNullableFilter<"Ad"> | number | null
    mileage?: IntNullableFilter<"Ad"> | number | null
    transmission?: EnumTransmissionNullableFilter<"Ad"> | $Enums.Transmission | null
    fuel?: EnumFuelNullableFilter<"Ad"> | $Enums.Fuel | null
    location?: StringNullableFilter<"Ad"> | string | null
    userId?: IntFilter<"Ad"> | number
    createdAt?: DateTimeFilter<"Ad"> | Date | string
    updatedAt?: DateTimeFilter<"Ad"> | Date | string
    categoryRef?: XOR<CategoryNodeNullableScalarRelationFilter, CategoryNodeWhereInput> | null
    subcategoryRef?: XOR<CategoryNodeNullableScalarRelationFilter, CategoryNodeWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AdOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageKey?: SortOrderInput | SortOrder
    imageKeys?: SortOrderInput | SortOrder
    category?: SortOrder
    subcategory?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    subcategoryId?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    year?: SortOrderInput | SortOrder
    mileage?: SortOrderInput | SortOrder
    transmission?: SortOrderInput | SortOrder
    fuel?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdCountOrderByAggregateInput
    _avg?: AdAvgOrderByAggregateInput
    _max?: AdMaxOrderByAggregateInput
    _min?: AdMinOrderByAggregateInput
    _sum?: AdSumOrderByAggregateInput
  }

  export type AdScalarWhereWithAggregatesInput = {
    AND?: AdScalarWhereWithAggregatesInput | AdScalarWhereWithAggregatesInput[]
    OR?: AdScalarWhereWithAggregatesInput[]
    NOT?: AdScalarWhereWithAggregatesInput | AdScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ad"> | number
    title?: StringWithAggregatesFilter<"Ad"> | string
    description?: StringWithAggregatesFilter<"Ad"> | string
    price?: FloatWithAggregatesFilter<"Ad"> | number
    imageKey?: StringNullableWithAggregatesFilter<"Ad"> | string | null
    imageKeys?: JsonNullableWithAggregatesFilter<"Ad">
    category?: EnumCategoryWithAggregatesFilter<"Ad"> | $Enums.Category
    subcategory?: StringNullableWithAggregatesFilter<"Ad"> | string | null
    categoryId?: IntNullableWithAggregatesFilter<"Ad"> | number | null
    subcategoryId?: IntNullableWithAggregatesFilter<"Ad"> | number | null
    brand?: StringNullableWithAggregatesFilter<"Ad"> | string | null
    model?: StringNullableWithAggregatesFilter<"Ad"> | string | null
    year?: IntNullableWithAggregatesFilter<"Ad"> | number | null
    mileage?: IntNullableWithAggregatesFilter<"Ad"> | number | null
    transmission?: EnumTransmissionNullableWithAggregatesFilter<"Ad"> | $Enums.Transmission | null
    fuel?: EnumFuelNullableWithAggregatesFilter<"Ad"> | $Enums.Fuel | null
    location?: StringNullableWithAggregatesFilter<"Ad"> | string | null
    userId?: IntWithAggregatesFilter<"Ad"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Ad"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Ad"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    name?: string | null
    ads?: AdCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    ads?: AdUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    ads?: AdUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    ads?: AdUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryNodeCreateInput = {
    key: string
    name: string
    order?: number
    active?: boolean
    parent?: CategoryNodeCreateNestedOneWithoutChildrenInput
    children?: CategoryNodeCreateNestedManyWithoutParentInput
    adsCategory?: AdCreateNestedManyWithoutCategoryRefInput
    adsSubcategory?: AdCreateNestedManyWithoutSubcategoryRefInput
  }

  export type CategoryNodeUncheckedCreateInput = {
    id?: number
    key: string
    name: string
    parentId?: number | null
    order?: number
    active?: boolean
    children?: CategoryNodeUncheckedCreateNestedManyWithoutParentInput
    adsCategory?: AdUncheckedCreateNestedManyWithoutCategoryRefInput
    adsSubcategory?: AdUncheckedCreateNestedManyWithoutSubcategoryRefInput
  }

  export type CategoryNodeUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    parent?: CategoryNodeUpdateOneWithoutChildrenNestedInput
    children?: CategoryNodeUpdateManyWithoutParentNestedInput
    adsCategory?: AdUpdateManyWithoutCategoryRefNestedInput
    adsSubcategory?: AdUpdateManyWithoutSubcategoryRefNestedInput
  }

  export type CategoryNodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    children?: CategoryNodeUncheckedUpdateManyWithoutParentNestedInput
    adsCategory?: AdUncheckedUpdateManyWithoutCategoryRefNestedInput
    adsSubcategory?: AdUncheckedUpdateManyWithoutSubcategoryRefNestedInput
  }

  export type CategoryNodeCreateManyInput = {
    id?: number
    key: string
    name: string
    parentId?: number | null
    order?: number
    active?: boolean
  }

  export type CategoryNodeUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoryNodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdCreateInput = {
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryRef?: CategoryNodeCreateNestedOneWithoutAdsCategoryInput
    subcategoryRef?: CategoryNodeCreateNestedOneWithoutAdsSubcategoryInput
    user: UserCreateNestedOneWithoutAdsInput
  }

  export type AdUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    categoryId?: number | null
    subcategoryId?: number | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryRef?: CategoryNodeUpdateOneWithoutAdsCategoryNestedInput
    subcategoryRef?: CategoryNodeUpdateOneWithoutAdsSubcategoryNestedInput
    user?: UserUpdateOneRequiredWithoutAdsNestedInput
  }

  export type AdUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdCreateManyInput = {
    id?: number
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    categoryId?: number | null
    subcategoryId?: number | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AdListRelationFilter = {
    every?: AdWhereInput
    some?: AdWhereInput
    none?: AdWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AdOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CategoryNodeNullableScalarRelationFilter = {
    is?: CategoryNodeWhereInput | null
    isNot?: CategoryNodeWhereInput | null
  }

  export type CategoryNodeListRelationFilter = {
    every?: CategoryNodeWhereInput
    some?: CategoryNodeWhereInput
    none?: CategoryNodeWhereInput
  }

  export type CategoryNodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryNodeCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    order?: SortOrder
    active?: SortOrder
  }

  export type CategoryNodeAvgOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    order?: SortOrder
  }

  export type CategoryNodeMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    order?: SortOrder
    active?: SortOrder
  }

  export type CategoryNodeMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    order?: SortOrder
    active?: SortOrder
  }

  export type CategoryNodeSumOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    order?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryFilter<$PrismaModel> | $Enums.Category
  }

  export type EnumTransmissionNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Transmission | EnumTransmissionFieldRefInput<$PrismaModel> | null
    in?: $Enums.Transmission[] | ListEnumTransmissionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Transmission[] | ListEnumTransmissionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTransmissionNullableFilter<$PrismaModel> | $Enums.Transmission | null
  }

  export type EnumFuelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Fuel | EnumFuelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Fuel[] | ListEnumFuelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Fuel[] | ListEnumFuelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFuelNullableFilter<$PrismaModel> | $Enums.Fuel | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AdCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageKey?: SortOrder
    imageKeys?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    year?: SortOrder
    mileage?: SortOrder
    transmission?: SortOrder
    fuel?: SortOrder
    location?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrder
    year?: SortOrder
    mileage?: SortOrder
    userId?: SortOrder
  }

  export type AdMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageKey?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    year?: SortOrder
    mileage?: SortOrder
    transmission?: SortOrder
    fuel?: SortOrder
    location?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageKey?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    year?: SortOrder
    mileage?: SortOrder
    transmission?: SortOrder
    fuel?: SortOrder
    location?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    subcategoryId?: SortOrder
    year?: SortOrder
    mileage?: SortOrder
    userId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryWithAggregatesFilter<$PrismaModel> | $Enums.Category
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryFilter<$PrismaModel>
    _max?: NestedEnumCategoryFilter<$PrismaModel>
  }

  export type EnumTransmissionNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Transmission | EnumTransmissionFieldRefInput<$PrismaModel> | null
    in?: $Enums.Transmission[] | ListEnumTransmissionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Transmission[] | ListEnumTransmissionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTransmissionNullableWithAggregatesFilter<$PrismaModel> | $Enums.Transmission | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTransmissionNullableFilter<$PrismaModel>
    _max?: NestedEnumTransmissionNullableFilter<$PrismaModel>
  }

  export type EnumFuelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Fuel | EnumFuelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Fuel[] | ListEnumFuelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Fuel[] | ListEnumFuelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFuelNullableWithAggregatesFilter<$PrismaModel> | $Enums.Fuel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumFuelNullableFilter<$PrismaModel>
    _max?: NestedEnumFuelNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AdCreateNestedManyWithoutUserInput = {
    create?: XOR<AdCreateWithoutUserInput, AdUncheckedCreateWithoutUserInput> | AdCreateWithoutUserInput[] | AdUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdCreateOrConnectWithoutUserInput | AdCreateOrConnectWithoutUserInput[]
    createMany?: AdCreateManyUserInputEnvelope
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
  }

  export type AdUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AdCreateWithoutUserInput, AdUncheckedCreateWithoutUserInput> | AdCreateWithoutUserInput[] | AdUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdCreateOrConnectWithoutUserInput | AdCreateOrConnectWithoutUserInput[]
    createMany?: AdCreateManyUserInputEnvelope
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AdUpdateManyWithoutUserNestedInput = {
    create?: XOR<AdCreateWithoutUserInput, AdUncheckedCreateWithoutUserInput> | AdCreateWithoutUserInput[] | AdUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdCreateOrConnectWithoutUserInput | AdCreateOrConnectWithoutUserInput[]
    upsert?: AdUpsertWithWhereUniqueWithoutUserInput | AdUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AdCreateManyUserInputEnvelope
    set?: AdWhereUniqueInput | AdWhereUniqueInput[]
    disconnect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    delete?: AdWhereUniqueInput | AdWhereUniqueInput[]
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    update?: AdUpdateWithWhereUniqueWithoutUserInput | AdUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AdUpdateManyWithWhereWithoutUserInput | AdUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AdScalarWhereInput | AdScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AdUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AdCreateWithoutUserInput, AdUncheckedCreateWithoutUserInput> | AdCreateWithoutUserInput[] | AdUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdCreateOrConnectWithoutUserInput | AdCreateOrConnectWithoutUserInput[]
    upsert?: AdUpsertWithWhereUniqueWithoutUserInput | AdUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AdCreateManyUserInputEnvelope
    set?: AdWhereUniqueInput | AdWhereUniqueInput[]
    disconnect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    delete?: AdWhereUniqueInput | AdWhereUniqueInput[]
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    update?: AdUpdateWithWhereUniqueWithoutUserInput | AdUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AdUpdateManyWithWhereWithoutUserInput | AdUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AdScalarWhereInput | AdScalarWhereInput[]
  }

  export type CategoryNodeCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryNodeCreateWithoutChildrenInput, CategoryNodeUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryNodeCreateOrConnectWithoutChildrenInput
    connect?: CategoryNodeWhereUniqueInput
  }

  export type CategoryNodeCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryNodeCreateWithoutParentInput, CategoryNodeUncheckedCreateWithoutParentInput> | CategoryNodeCreateWithoutParentInput[] | CategoryNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryNodeCreateOrConnectWithoutParentInput | CategoryNodeCreateOrConnectWithoutParentInput[]
    createMany?: CategoryNodeCreateManyParentInputEnvelope
    connect?: CategoryNodeWhereUniqueInput | CategoryNodeWhereUniqueInput[]
  }

  export type AdCreateNestedManyWithoutCategoryRefInput = {
    create?: XOR<AdCreateWithoutCategoryRefInput, AdUncheckedCreateWithoutCategoryRefInput> | AdCreateWithoutCategoryRefInput[] | AdUncheckedCreateWithoutCategoryRefInput[]
    connectOrCreate?: AdCreateOrConnectWithoutCategoryRefInput | AdCreateOrConnectWithoutCategoryRefInput[]
    createMany?: AdCreateManyCategoryRefInputEnvelope
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
  }

  export type AdCreateNestedManyWithoutSubcategoryRefInput = {
    create?: XOR<AdCreateWithoutSubcategoryRefInput, AdUncheckedCreateWithoutSubcategoryRefInput> | AdCreateWithoutSubcategoryRefInput[] | AdUncheckedCreateWithoutSubcategoryRefInput[]
    connectOrCreate?: AdCreateOrConnectWithoutSubcategoryRefInput | AdCreateOrConnectWithoutSubcategoryRefInput[]
    createMany?: AdCreateManySubcategoryRefInputEnvelope
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
  }

  export type CategoryNodeUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryNodeCreateWithoutParentInput, CategoryNodeUncheckedCreateWithoutParentInput> | CategoryNodeCreateWithoutParentInput[] | CategoryNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryNodeCreateOrConnectWithoutParentInput | CategoryNodeCreateOrConnectWithoutParentInput[]
    createMany?: CategoryNodeCreateManyParentInputEnvelope
    connect?: CategoryNodeWhereUniqueInput | CategoryNodeWhereUniqueInput[]
  }

  export type AdUncheckedCreateNestedManyWithoutCategoryRefInput = {
    create?: XOR<AdCreateWithoutCategoryRefInput, AdUncheckedCreateWithoutCategoryRefInput> | AdCreateWithoutCategoryRefInput[] | AdUncheckedCreateWithoutCategoryRefInput[]
    connectOrCreate?: AdCreateOrConnectWithoutCategoryRefInput | AdCreateOrConnectWithoutCategoryRefInput[]
    createMany?: AdCreateManyCategoryRefInputEnvelope
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
  }

  export type AdUncheckedCreateNestedManyWithoutSubcategoryRefInput = {
    create?: XOR<AdCreateWithoutSubcategoryRefInput, AdUncheckedCreateWithoutSubcategoryRefInput> | AdCreateWithoutSubcategoryRefInput[] | AdUncheckedCreateWithoutSubcategoryRefInput[]
    connectOrCreate?: AdCreateOrConnectWithoutSubcategoryRefInput | AdCreateOrConnectWithoutSubcategoryRefInput[]
    createMany?: AdCreateManySubcategoryRefInputEnvelope
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CategoryNodeUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryNodeCreateWithoutChildrenInput, CategoryNodeUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryNodeCreateOrConnectWithoutChildrenInput
    upsert?: CategoryNodeUpsertWithoutChildrenInput
    disconnect?: CategoryNodeWhereInput | boolean
    delete?: CategoryNodeWhereInput | boolean
    connect?: CategoryNodeWhereUniqueInput
    update?: XOR<XOR<CategoryNodeUpdateToOneWithWhereWithoutChildrenInput, CategoryNodeUpdateWithoutChildrenInput>, CategoryNodeUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryNodeUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryNodeCreateWithoutParentInput, CategoryNodeUncheckedCreateWithoutParentInput> | CategoryNodeCreateWithoutParentInput[] | CategoryNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryNodeCreateOrConnectWithoutParentInput | CategoryNodeCreateOrConnectWithoutParentInput[]
    upsert?: CategoryNodeUpsertWithWhereUniqueWithoutParentInput | CategoryNodeUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryNodeCreateManyParentInputEnvelope
    set?: CategoryNodeWhereUniqueInput | CategoryNodeWhereUniqueInput[]
    disconnect?: CategoryNodeWhereUniqueInput | CategoryNodeWhereUniqueInput[]
    delete?: CategoryNodeWhereUniqueInput | CategoryNodeWhereUniqueInput[]
    connect?: CategoryNodeWhereUniqueInput | CategoryNodeWhereUniqueInput[]
    update?: CategoryNodeUpdateWithWhereUniqueWithoutParentInput | CategoryNodeUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryNodeUpdateManyWithWhereWithoutParentInput | CategoryNodeUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryNodeScalarWhereInput | CategoryNodeScalarWhereInput[]
  }

  export type AdUpdateManyWithoutCategoryRefNestedInput = {
    create?: XOR<AdCreateWithoutCategoryRefInput, AdUncheckedCreateWithoutCategoryRefInput> | AdCreateWithoutCategoryRefInput[] | AdUncheckedCreateWithoutCategoryRefInput[]
    connectOrCreate?: AdCreateOrConnectWithoutCategoryRefInput | AdCreateOrConnectWithoutCategoryRefInput[]
    upsert?: AdUpsertWithWhereUniqueWithoutCategoryRefInput | AdUpsertWithWhereUniqueWithoutCategoryRefInput[]
    createMany?: AdCreateManyCategoryRefInputEnvelope
    set?: AdWhereUniqueInput | AdWhereUniqueInput[]
    disconnect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    delete?: AdWhereUniqueInput | AdWhereUniqueInput[]
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    update?: AdUpdateWithWhereUniqueWithoutCategoryRefInput | AdUpdateWithWhereUniqueWithoutCategoryRefInput[]
    updateMany?: AdUpdateManyWithWhereWithoutCategoryRefInput | AdUpdateManyWithWhereWithoutCategoryRefInput[]
    deleteMany?: AdScalarWhereInput | AdScalarWhereInput[]
  }

  export type AdUpdateManyWithoutSubcategoryRefNestedInput = {
    create?: XOR<AdCreateWithoutSubcategoryRefInput, AdUncheckedCreateWithoutSubcategoryRefInput> | AdCreateWithoutSubcategoryRefInput[] | AdUncheckedCreateWithoutSubcategoryRefInput[]
    connectOrCreate?: AdCreateOrConnectWithoutSubcategoryRefInput | AdCreateOrConnectWithoutSubcategoryRefInput[]
    upsert?: AdUpsertWithWhereUniqueWithoutSubcategoryRefInput | AdUpsertWithWhereUniqueWithoutSubcategoryRefInput[]
    createMany?: AdCreateManySubcategoryRefInputEnvelope
    set?: AdWhereUniqueInput | AdWhereUniqueInput[]
    disconnect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    delete?: AdWhereUniqueInput | AdWhereUniqueInput[]
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    update?: AdUpdateWithWhereUniqueWithoutSubcategoryRefInput | AdUpdateWithWhereUniqueWithoutSubcategoryRefInput[]
    updateMany?: AdUpdateManyWithWhereWithoutSubcategoryRefInput | AdUpdateManyWithWhereWithoutSubcategoryRefInput[]
    deleteMany?: AdScalarWhereInput | AdScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryNodeUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryNodeCreateWithoutParentInput, CategoryNodeUncheckedCreateWithoutParentInput> | CategoryNodeCreateWithoutParentInput[] | CategoryNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryNodeCreateOrConnectWithoutParentInput | CategoryNodeCreateOrConnectWithoutParentInput[]
    upsert?: CategoryNodeUpsertWithWhereUniqueWithoutParentInput | CategoryNodeUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryNodeCreateManyParentInputEnvelope
    set?: CategoryNodeWhereUniqueInput | CategoryNodeWhereUniqueInput[]
    disconnect?: CategoryNodeWhereUniqueInput | CategoryNodeWhereUniqueInput[]
    delete?: CategoryNodeWhereUniqueInput | CategoryNodeWhereUniqueInput[]
    connect?: CategoryNodeWhereUniqueInput | CategoryNodeWhereUniqueInput[]
    update?: CategoryNodeUpdateWithWhereUniqueWithoutParentInput | CategoryNodeUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryNodeUpdateManyWithWhereWithoutParentInput | CategoryNodeUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryNodeScalarWhereInput | CategoryNodeScalarWhereInput[]
  }

  export type AdUncheckedUpdateManyWithoutCategoryRefNestedInput = {
    create?: XOR<AdCreateWithoutCategoryRefInput, AdUncheckedCreateWithoutCategoryRefInput> | AdCreateWithoutCategoryRefInput[] | AdUncheckedCreateWithoutCategoryRefInput[]
    connectOrCreate?: AdCreateOrConnectWithoutCategoryRefInput | AdCreateOrConnectWithoutCategoryRefInput[]
    upsert?: AdUpsertWithWhereUniqueWithoutCategoryRefInput | AdUpsertWithWhereUniqueWithoutCategoryRefInput[]
    createMany?: AdCreateManyCategoryRefInputEnvelope
    set?: AdWhereUniqueInput | AdWhereUniqueInput[]
    disconnect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    delete?: AdWhereUniqueInput | AdWhereUniqueInput[]
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    update?: AdUpdateWithWhereUniqueWithoutCategoryRefInput | AdUpdateWithWhereUniqueWithoutCategoryRefInput[]
    updateMany?: AdUpdateManyWithWhereWithoutCategoryRefInput | AdUpdateManyWithWhereWithoutCategoryRefInput[]
    deleteMany?: AdScalarWhereInput | AdScalarWhereInput[]
  }

  export type AdUncheckedUpdateManyWithoutSubcategoryRefNestedInput = {
    create?: XOR<AdCreateWithoutSubcategoryRefInput, AdUncheckedCreateWithoutSubcategoryRefInput> | AdCreateWithoutSubcategoryRefInput[] | AdUncheckedCreateWithoutSubcategoryRefInput[]
    connectOrCreate?: AdCreateOrConnectWithoutSubcategoryRefInput | AdCreateOrConnectWithoutSubcategoryRefInput[]
    upsert?: AdUpsertWithWhereUniqueWithoutSubcategoryRefInput | AdUpsertWithWhereUniqueWithoutSubcategoryRefInput[]
    createMany?: AdCreateManySubcategoryRefInputEnvelope
    set?: AdWhereUniqueInput | AdWhereUniqueInput[]
    disconnect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    delete?: AdWhereUniqueInput | AdWhereUniqueInput[]
    connect?: AdWhereUniqueInput | AdWhereUniqueInput[]
    update?: AdUpdateWithWhereUniqueWithoutSubcategoryRefInput | AdUpdateWithWhereUniqueWithoutSubcategoryRefInput[]
    updateMany?: AdUpdateManyWithWhereWithoutSubcategoryRefInput | AdUpdateManyWithWhereWithoutSubcategoryRefInput[]
    deleteMany?: AdScalarWhereInput | AdScalarWhereInput[]
  }

  export type CategoryNodeCreateNestedOneWithoutAdsCategoryInput = {
    create?: XOR<CategoryNodeCreateWithoutAdsCategoryInput, CategoryNodeUncheckedCreateWithoutAdsCategoryInput>
    connectOrCreate?: CategoryNodeCreateOrConnectWithoutAdsCategoryInput
    connect?: CategoryNodeWhereUniqueInput
  }

  export type CategoryNodeCreateNestedOneWithoutAdsSubcategoryInput = {
    create?: XOR<CategoryNodeCreateWithoutAdsSubcategoryInput, CategoryNodeUncheckedCreateWithoutAdsSubcategoryInput>
    connectOrCreate?: CategoryNodeCreateOrConnectWithoutAdsSubcategoryInput
    connect?: CategoryNodeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAdsInput = {
    create?: XOR<UserCreateWithoutAdsInput, UserUncheckedCreateWithoutAdsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumCategoryFieldUpdateOperationsInput = {
    set?: $Enums.Category
  }

  export type NullableEnumTransmissionFieldUpdateOperationsInput = {
    set?: $Enums.Transmission | null
  }

  export type NullableEnumFuelFieldUpdateOperationsInput = {
    set?: $Enums.Fuel | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CategoryNodeUpdateOneWithoutAdsCategoryNestedInput = {
    create?: XOR<CategoryNodeCreateWithoutAdsCategoryInput, CategoryNodeUncheckedCreateWithoutAdsCategoryInput>
    connectOrCreate?: CategoryNodeCreateOrConnectWithoutAdsCategoryInput
    upsert?: CategoryNodeUpsertWithoutAdsCategoryInput
    disconnect?: CategoryNodeWhereInput | boolean
    delete?: CategoryNodeWhereInput | boolean
    connect?: CategoryNodeWhereUniqueInput
    update?: XOR<XOR<CategoryNodeUpdateToOneWithWhereWithoutAdsCategoryInput, CategoryNodeUpdateWithoutAdsCategoryInput>, CategoryNodeUncheckedUpdateWithoutAdsCategoryInput>
  }

  export type CategoryNodeUpdateOneWithoutAdsSubcategoryNestedInput = {
    create?: XOR<CategoryNodeCreateWithoutAdsSubcategoryInput, CategoryNodeUncheckedCreateWithoutAdsSubcategoryInput>
    connectOrCreate?: CategoryNodeCreateOrConnectWithoutAdsSubcategoryInput
    upsert?: CategoryNodeUpsertWithoutAdsSubcategoryInput
    disconnect?: CategoryNodeWhereInput | boolean
    delete?: CategoryNodeWhereInput | boolean
    connect?: CategoryNodeWhereUniqueInput
    update?: XOR<XOR<CategoryNodeUpdateToOneWithWhereWithoutAdsSubcategoryInput, CategoryNodeUpdateWithoutAdsSubcategoryInput>, CategoryNodeUncheckedUpdateWithoutAdsSubcategoryInput>
  }

  export type UserUpdateOneRequiredWithoutAdsNestedInput = {
    create?: XOR<UserCreateWithoutAdsInput, UserUncheckedCreateWithoutAdsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdsInput
    upsert?: UserUpsertWithoutAdsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdsInput, UserUpdateWithoutAdsInput>, UserUncheckedUpdateWithoutAdsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryFilter<$PrismaModel> | $Enums.Category
  }

  export type NestedEnumTransmissionNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Transmission | EnumTransmissionFieldRefInput<$PrismaModel> | null
    in?: $Enums.Transmission[] | ListEnumTransmissionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Transmission[] | ListEnumTransmissionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTransmissionNullableFilter<$PrismaModel> | $Enums.Transmission | null
  }

  export type NestedEnumFuelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Fuel | EnumFuelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Fuel[] | ListEnumFuelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Fuel[] | ListEnumFuelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFuelNullableFilter<$PrismaModel> | $Enums.Fuel | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryWithAggregatesFilter<$PrismaModel> | $Enums.Category
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryFilter<$PrismaModel>
    _max?: NestedEnumCategoryFilter<$PrismaModel>
  }

  export type NestedEnumTransmissionNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Transmission | EnumTransmissionFieldRefInput<$PrismaModel> | null
    in?: $Enums.Transmission[] | ListEnumTransmissionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Transmission[] | ListEnumTransmissionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTransmissionNullableWithAggregatesFilter<$PrismaModel> | $Enums.Transmission | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTransmissionNullableFilter<$PrismaModel>
    _max?: NestedEnumTransmissionNullableFilter<$PrismaModel>
  }

  export type NestedEnumFuelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Fuel | EnumFuelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Fuel[] | ListEnumFuelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Fuel[] | ListEnumFuelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFuelNullableWithAggregatesFilter<$PrismaModel> | $Enums.Fuel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumFuelNullableFilter<$PrismaModel>
    _max?: NestedEnumFuelNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AdCreateWithoutUserInput = {
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryRef?: CategoryNodeCreateNestedOneWithoutAdsCategoryInput
    subcategoryRef?: CategoryNodeCreateNestedOneWithoutAdsSubcategoryInput
  }

  export type AdUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    categoryId?: number | null
    subcategoryId?: number | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdCreateOrConnectWithoutUserInput = {
    where: AdWhereUniqueInput
    create: XOR<AdCreateWithoutUserInput, AdUncheckedCreateWithoutUserInput>
  }

  export type AdCreateManyUserInputEnvelope = {
    data: AdCreateManyUserInput | AdCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AdUpsertWithWhereUniqueWithoutUserInput = {
    where: AdWhereUniqueInput
    update: XOR<AdUpdateWithoutUserInput, AdUncheckedUpdateWithoutUserInput>
    create: XOR<AdCreateWithoutUserInput, AdUncheckedCreateWithoutUserInput>
  }

  export type AdUpdateWithWhereUniqueWithoutUserInput = {
    where: AdWhereUniqueInput
    data: XOR<AdUpdateWithoutUserInput, AdUncheckedUpdateWithoutUserInput>
  }

  export type AdUpdateManyWithWhereWithoutUserInput = {
    where: AdScalarWhereInput
    data: XOR<AdUpdateManyMutationInput, AdUncheckedUpdateManyWithoutUserInput>
  }

  export type AdScalarWhereInput = {
    AND?: AdScalarWhereInput | AdScalarWhereInput[]
    OR?: AdScalarWhereInput[]
    NOT?: AdScalarWhereInput | AdScalarWhereInput[]
    id?: IntFilter<"Ad"> | number
    title?: StringFilter<"Ad"> | string
    description?: StringFilter<"Ad"> | string
    price?: FloatFilter<"Ad"> | number
    imageKey?: StringNullableFilter<"Ad"> | string | null
    imageKeys?: JsonNullableFilter<"Ad">
    category?: EnumCategoryFilter<"Ad"> | $Enums.Category
    subcategory?: StringNullableFilter<"Ad"> | string | null
    categoryId?: IntNullableFilter<"Ad"> | number | null
    subcategoryId?: IntNullableFilter<"Ad"> | number | null
    brand?: StringNullableFilter<"Ad"> | string | null
    model?: StringNullableFilter<"Ad"> | string | null
    year?: IntNullableFilter<"Ad"> | number | null
    mileage?: IntNullableFilter<"Ad"> | number | null
    transmission?: EnumTransmissionNullableFilter<"Ad"> | $Enums.Transmission | null
    fuel?: EnumFuelNullableFilter<"Ad"> | $Enums.Fuel | null
    location?: StringNullableFilter<"Ad"> | string | null
    userId?: IntFilter<"Ad"> | number
    createdAt?: DateTimeFilter<"Ad"> | Date | string
    updatedAt?: DateTimeFilter<"Ad"> | Date | string
  }

  export type CategoryNodeCreateWithoutChildrenInput = {
    key: string
    name: string
    order?: number
    active?: boolean
    parent?: CategoryNodeCreateNestedOneWithoutChildrenInput
    adsCategory?: AdCreateNestedManyWithoutCategoryRefInput
    adsSubcategory?: AdCreateNestedManyWithoutSubcategoryRefInput
  }

  export type CategoryNodeUncheckedCreateWithoutChildrenInput = {
    id?: number
    key: string
    name: string
    parentId?: number | null
    order?: number
    active?: boolean
    adsCategory?: AdUncheckedCreateNestedManyWithoutCategoryRefInput
    adsSubcategory?: AdUncheckedCreateNestedManyWithoutSubcategoryRefInput
  }

  export type CategoryNodeCreateOrConnectWithoutChildrenInput = {
    where: CategoryNodeWhereUniqueInput
    create: XOR<CategoryNodeCreateWithoutChildrenInput, CategoryNodeUncheckedCreateWithoutChildrenInput>
  }

  export type CategoryNodeCreateWithoutParentInput = {
    key: string
    name: string
    order?: number
    active?: boolean
    children?: CategoryNodeCreateNestedManyWithoutParentInput
    adsCategory?: AdCreateNestedManyWithoutCategoryRefInput
    adsSubcategory?: AdCreateNestedManyWithoutSubcategoryRefInput
  }

  export type CategoryNodeUncheckedCreateWithoutParentInput = {
    id?: number
    key: string
    name: string
    order?: number
    active?: boolean
    children?: CategoryNodeUncheckedCreateNestedManyWithoutParentInput
    adsCategory?: AdUncheckedCreateNestedManyWithoutCategoryRefInput
    adsSubcategory?: AdUncheckedCreateNestedManyWithoutSubcategoryRefInput
  }

  export type CategoryNodeCreateOrConnectWithoutParentInput = {
    where: CategoryNodeWhereUniqueInput
    create: XOR<CategoryNodeCreateWithoutParentInput, CategoryNodeUncheckedCreateWithoutParentInput>
  }

  export type CategoryNodeCreateManyParentInputEnvelope = {
    data: CategoryNodeCreateManyParentInput | CategoryNodeCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type AdCreateWithoutCategoryRefInput = {
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subcategoryRef?: CategoryNodeCreateNestedOneWithoutAdsSubcategoryInput
    user: UserCreateNestedOneWithoutAdsInput
  }

  export type AdUncheckedCreateWithoutCategoryRefInput = {
    id?: number
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    subcategoryId?: number | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdCreateOrConnectWithoutCategoryRefInput = {
    where: AdWhereUniqueInput
    create: XOR<AdCreateWithoutCategoryRefInput, AdUncheckedCreateWithoutCategoryRefInput>
  }

  export type AdCreateManyCategoryRefInputEnvelope = {
    data: AdCreateManyCategoryRefInput | AdCreateManyCategoryRefInput[]
    skipDuplicates?: boolean
  }

  export type AdCreateWithoutSubcategoryRefInput = {
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryRef?: CategoryNodeCreateNestedOneWithoutAdsCategoryInput
    user: UserCreateNestedOneWithoutAdsInput
  }

  export type AdUncheckedCreateWithoutSubcategoryRefInput = {
    id?: number
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    categoryId?: number | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdCreateOrConnectWithoutSubcategoryRefInput = {
    where: AdWhereUniqueInput
    create: XOR<AdCreateWithoutSubcategoryRefInput, AdUncheckedCreateWithoutSubcategoryRefInput>
  }

  export type AdCreateManySubcategoryRefInputEnvelope = {
    data: AdCreateManySubcategoryRefInput | AdCreateManySubcategoryRefInput[]
    skipDuplicates?: boolean
  }

  export type CategoryNodeUpsertWithoutChildrenInput = {
    update: XOR<CategoryNodeUpdateWithoutChildrenInput, CategoryNodeUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryNodeCreateWithoutChildrenInput, CategoryNodeUncheckedCreateWithoutChildrenInput>
    where?: CategoryNodeWhereInput
  }

  export type CategoryNodeUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryNodeWhereInput
    data: XOR<CategoryNodeUpdateWithoutChildrenInput, CategoryNodeUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryNodeUpdateWithoutChildrenInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    parent?: CategoryNodeUpdateOneWithoutChildrenNestedInput
    adsCategory?: AdUpdateManyWithoutCategoryRefNestedInput
    adsSubcategory?: AdUpdateManyWithoutSubcategoryRefNestedInput
  }

  export type CategoryNodeUncheckedUpdateWithoutChildrenInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    adsCategory?: AdUncheckedUpdateManyWithoutCategoryRefNestedInput
    adsSubcategory?: AdUncheckedUpdateManyWithoutSubcategoryRefNestedInput
  }

  export type CategoryNodeUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryNodeWhereUniqueInput
    update: XOR<CategoryNodeUpdateWithoutParentInput, CategoryNodeUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryNodeCreateWithoutParentInput, CategoryNodeUncheckedCreateWithoutParentInput>
  }

  export type CategoryNodeUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryNodeWhereUniqueInput
    data: XOR<CategoryNodeUpdateWithoutParentInput, CategoryNodeUncheckedUpdateWithoutParentInput>
  }

  export type CategoryNodeUpdateManyWithWhereWithoutParentInput = {
    where: CategoryNodeScalarWhereInput
    data: XOR<CategoryNodeUpdateManyMutationInput, CategoryNodeUncheckedUpdateManyWithoutParentInput>
  }

  export type CategoryNodeScalarWhereInput = {
    AND?: CategoryNodeScalarWhereInput | CategoryNodeScalarWhereInput[]
    OR?: CategoryNodeScalarWhereInput[]
    NOT?: CategoryNodeScalarWhereInput | CategoryNodeScalarWhereInput[]
    id?: IntFilter<"CategoryNode"> | number
    key?: StringFilter<"CategoryNode"> | string
    name?: StringFilter<"CategoryNode"> | string
    parentId?: IntNullableFilter<"CategoryNode"> | number | null
    order?: IntFilter<"CategoryNode"> | number
    active?: BoolFilter<"CategoryNode"> | boolean
  }

  export type AdUpsertWithWhereUniqueWithoutCategoryRefInput = {
    where: AdWhereUniqueInput
    update: XOR<AdUpdateWithoutCategoryRefInput, AdUncheckedUpdateWithoutCategoryRefInput>
    create: XOR<AdCreateWithoutCategoryRefInput, AdUncheckedCreateWithoutCategoryRefInput>
  }

  export type AdUpdateWithWhereUniqueWithoutCategoryRefInput = {
    where: AdWhereUniqueInput
    data: XOR<AdUpdateWithoutCategoryRefInput, AdUncheckedUpdateWithoutCategoryRefInput>
  }

  export type AdUpdateManyWithWhereWithoutCategoryRefInput = {
    where: AdScalarWhereInput
    data: XOR<AdUpdateManyMutationInput, AdUncheckedUpdateManyWithoutCategoryRefInput>
  }

  export type AdUpsertWithWhereUniqueWithoutSubcategoryRefInput = {
    where: AdWhereUniqueInput
    update: XOR<AdUpdateWithoutSubcategoryRefInput, AdUncheckedUpdateWithoutSubcategoryRefInput>
    create: XOR<AdCreateWithoutSubcategoryRefInput, AdUncheckedCreateWithoutSubcategoryRefInput>
  }

  export type AdUpdateWithWhereUniqueWithoutSubcategoryRefInput = {
    where: AdWhereUniqueInput
    data: XOR<AdUpdateWithoutSubcategoryRefInput, AdUncheckedUpdateWithoutSubcategoryRefInput>
  }

  export type AdUpdateManyWithWhereWithoutSubcategoryRefInput = {
    where: AdScalarWhereInput
    data: XOR<AdUpdateManyMutationInput, AdUncheckedUpdateManyWithoutSubcategoryRefInput>
  }

  export type CategoryNodeCreateWithoutAdsCategoryInput = {
    key: string
    name: string
    order?: number
    active?: boolean
    parent?: CategoryNodeCreateNestedOneWithoutChildrenInput
    children?: CategoryNodeCreateNestedManyWithoutParentInput
    adsSubcategory?: AdCreateNestedManyWithoutSubcategoryRefInput
  }

  export type CategoryNodeUncheckedCreateWithoutAdsCategoryInput = {
    id?: number
    key: string
    name: string
    parentId?: number | null
    order?: number
    active?: boolean
    children?: CategoryNodeUncheckedCreateNestedManyWithoutParentInput
    adsSubcategory?: AdUncheckedCreateNestedManyWithoutSubcategoryRefInput
  }

  export type CategoryNodeCreateOrConnectWithoutAdsCategoryInput = {
    where: CategoryNodeWhereUniqueInput
    create: XOR<CategoryNodeCreateWithoutAdsCategoryInput, CategoryNodeUncheckedCreateWithoutAdsCategoryInput>
  }

  export type CategoryNodeCreateWithoutAdsSubcategoryInput = {
    key: string
    name: string
    order?: number
    active?: boolean
    parent?: CategoryNodeCreateNestedOneWithoutChildrenInput
    children?: CategoryNodeCreateNestedManyWithoutParentInput
    adsCategory?: AdCreateNestedManyWithoutCategoryRefInput
  }

  export type CategoryNodeUncheckedCreateWithoutAdsSubcategoryInput = {
    id?: number
    key: string
    name: string
    parentId?: number | null
    order?: number
    active?: boolean
    children?: CategoryNodeUncheckedCreateNestedManyWithoutParentInput
    adsCategory?: AdUncheckedCreateNestedManyWithoutCategoryRefInput
  }

  export type CategoryNodeCreateOrConnectWithoutAdsSubcategoryInput = {
    where: CategoryNodeWhereUniqueInput
    create: XOR<CategoryNodeCreateWithoutAdsSubcategoryInput, CategoryNodeUncheckedCreateWithoutAdsSubcategoryInput>
  }

  export type UserCreateWithoutAdsInput = {
    email: string
    password: string
    name?: string | null
  }

  export type UserUncheckedCreateWithoutAdsInput = {
    id?: number
    email: string
    password: string
    name?: string | null
  }

  export type UserCreateOrConnectWithoutAdsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdsInput, UserUncheckedCreateWithoutAdsInput>
  }

  export type CategoryNodeUpsertWithoutAdsCategoryInput = {
    update: XOR<CategoryNodeUpdateWithoutAdsCategoryInput, CategoryNodeUncheckedUpdateWithoutAdsCategoryInput>
    create: XOR<CategoryNodeCreateWithoutAdsCategoryInput, CategoryNodeUncheckedCreateWithoutAdsCategoryInput>
    where?: CategoryNodeWhereInput
  }

  export type CategoryNodeUpdateToOneWithWhereWithoutAdsCategoryInput = {
    where?: CategoryNodeWhereInput
    data: XOR<CategoryNodeUpdateWithoutAdsCategoryInput, CategoryNodeUncheckedUpdateWithoutAdsCategoryInput>
  }

  export type CategoryNodeUpdateWithoutAdsCategoryInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    parent?: CategoryNodeUpdateOneWithoutChildrenNestedInput
    children?: CategoryNodeUpdateManyWithoutParentNestedInput
    adsSubcategory?: AdUpdateManyWithoutSubcategoryRefNestedInput
  }

  export type CategoryNodeUncheckedUpdateWithoutAdsCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    children?: CategoryNodeUncheckedUpdateManyWithoutParentNestedInput
    adsSubcategory?: AdUncheckedUpdateManyWithoutSubcategoryRefNestedInput
  }

  export type CategoryNodeUpsertWithoutAdsSubcategoryInput = {
    update: XOR<CategoryNodeUpdateWithoutAdsSubcategoryInput, CategoryNodeUncheckedUpdateWithoutAdsSubcategoryInput>
    create: XOR<CategoryNodeCreateWithoutAdsSubcategoryInput, CategoryNodeUncheckedCreateWithoutAdsSubcategoryInput>
    where?: CategoryNodeWhereInput
  }

  export type CategoryNodeUpdateToOneWithWhereWithoutAdsSubcategoryInput = {
    where?: CategoryNodeWhereInput
    data: XOR<CategoryNodeUpdateWithoutAdsSubcategoryInput, CategoryNodeUncheckedUpdateWithoutAdsSubcategoryInput>
  }

  export type CategoryNodeUpdateWithoutAdsSubcategoryInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    parent?: CategoryNodeUpdateOneWithoutChildrenNestedInput
    children?: CategoryNodeUpdateManyWithoutParentNestedInput
    adsCategory?: AdUpdateManyWithoutCategoryRefNestedInput
  }

  export type CategoryNodeUncheckedUpdateWithoutAdsSubcategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    children?: CategoryNodeUncheckedUpdateManyWithoutParentNestedInput
    adsCategory?: AdUncheckedUpdateManyWithoutCategoryRefNestedInput
  }

  export type UserUpsertWithoutAdsInput = {
    update: XOR<UserUpdateWithoutAdsInput, UserUncheckedUpdateWithoutAdsInput>
    create: XOR<UserCreateWithoutAdsInput, UserUncheckedCreateWithoutAdsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdsInput, UserUncheckedUpdateWithoutAdsInput>
  }

  export type UserUpdateWithoutAdsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutAdsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdCreateManyUserInput = {
    id?: number
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    categoryId?: number | null
    subcategoryId?: number | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryRef?: CategoryNodeUpdateOneWithoutAdsCategoryNestedInput
    subcategoryRef?: CategoryNodeUpdateOneWithoutAdsSubcategoryNestedInput
  }

  export type AdUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryNodeCreateManyParentInput = {
    id?: number
    key: string
    name: string
    order?: number
    active?: boolean
  }

  export type AdCreateManyCategoryRefInput = {
    id?: number
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    subcategoryId?: number | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdCreateManySubcategoryRefInput = {
    id?: number
    title: string
    description: string
    price: number
    imageKey?: string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: $Enums.Category
    subcategory?: string | null
    categoryId?: number | null
    brand?: string | null
    model?: string | null
    year?: number | null
    mileage?: number | null
    transmission?: $Enums.Transmission | null
    fuel?: $Enums.Fuel | null
    location?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryNodeUpdateWithoutParentInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    children?: CategoryNodeUpdateManyWithoutParentNestedInput
    adsCategory?: AdUpdateManyWithoutCategoryRefNestedInput
    adsSubcategory?: AdUpdateManyWithoutSubcategoryRefNestedInput
  }

  export type CategoryNodeUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    children?: CategoryNodeUncheckedUpdateManyWithoutParentNestedInput
    adsCategory?: AdUncheckedUpdateManyWithoutCategoryRefNestedInput
    adsSubcategory?: AdUncheckedUpdateManyWithoutSubcategoryRefNestedInput
  }

  export type CategoryNodeUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdUpdateWithoutCategoryRefInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcategoryRef?: CategoryNodeUpdateOneWithoutAdsSubcategoryNestedInput
    user?: UserUpdateOneRequiredWithoutAdsNestedInput
  }

  export type AdUncheckedUpdateWithoutCategoryRefInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdUncheckedUpdateManyWithoutCategoryRefInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdUpdateWithoutSubcategoryRefInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryRef?: CategoryNodeUpdateOneWithoutAdsCategoryNestedInput
    user?: UserUpdateOneRequiredWithoutAdsNestedInput
  }

  export type AdUncheckedUpdateWithoutSubcategoryRefInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdUncheckedUpdateManyWithoutSubcategoryRefInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageKey?: NullableStringFieldUpdateOperationsInput | string | null
    imageKeys?: NullableJsonNullValueInput | InputJsonValue
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableIntFieldUpdateOperationsInput | number | null
    mileage?: NullableIntFieldUpdateOperationsInput | number | null
    transmission?: NullableEnumTransmissionFieldUpdateOperationsInput | $Enums.Transmission | null
    fuel?: NullableEnumFuelFieldUpdateOperationsInput | $Enums.Fuel | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}