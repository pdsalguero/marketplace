// ========= PRISMA SCHEMA =========
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===== Enums =====
 */
enum UserStatus {
  active
  banned
}

enum ListingStatus {
  draft
  pending
  active
  paused
  rejected
  expired
  sold_out
}

enum Condition {
  new
  used
}

enum ConversationStatus {
  open
  blocked
  archived
}

enum ReportTarget {
  listing
  user
  message
}

enum ReportStatus {
  open
  reviewing
  closed
}

enum PromotionType {
  home_featured
  top_list
  urgent_badge
}

enum PaymentStatus {
  created
  approved
  rejected
  refunded
  chargeback
}

/**
 * ===== Modelos =====
 */

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  passwordHash String
  isAdmin      Boolean    @default(false)
  status       UserStatus @default(active)
  createdAt    DateTime   @default(now())
  lastLoginAt  DateTime?
  deletedAt    DateTime?

  profile             UserProfile?
  listings            Listing[]
  favorites           Favorite[]
  conversationsBuyer  Conversation[]   @relation("buyer")
  conversationsSeller Conversation[]   @relation("seller")
  messages            Message[]
  reports             Report[]         @relation("reporter")
  promoOrders         PromotionOrder[] @relation("buyerOrder")
}

model UserProfile {
  userId      String  @id
  user        User    @relation(fields: [userId], references: [id])
  displayName String
  phone       String?
  avatarUrl   String?
  about       String?
  provinceId  String?
  cityId      String?
  addressText String?
}

/**
 * Ubicaciones jerárquicas (provincia -> ciudad)
 */
model Location {
  id        String     @id @default(uuid())
  country   String
  name      String
  slug      String     @unique        // único para upsert.where { slug }
  parentId  String?
  parent    Location?  @relation("LocationToParent", fields: [parentId], references: [id])
  children  Location[] @relation("LocationToParent")
  createdAt DateTime   @default(now())

  @@index([country, slug])
}

/**
 * Categorías (3 niveles)
 */
model Category {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique        // único para upsert.where { slug }
  parentId  String?
  parent    Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToParent")
  level     Int
  isActive  Boolean    @default(true)
  sortOrder Int        @default(0)

  listings      Listing[]
  attributeDefs ListingAttributeDef[] @relation("CategoryToAttrDefs") // inversa requerida

  // (Quitado @@unique([slug]) porque ya está @unique en el campo)
}

/**
 * Avisos
 */
model Listing {
  id         String   @id @default(uuid())
  seller     User     @relation(fields: [sellerId], references: [id])
  sellerId   String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  title       String
  description String?
  priceAmount Decimal       @db.Decimal(12, 2)
  currency    String        @default("ARS")
  condition   Condition
  quantity    Int           @default(1)
  status      ListingStatus @default(pending)

  provinceId String?
  cityId     String?

  viewsCount     Int       @default(0)
  favoritesCount Int       @default(0)
  contactsCount  Int       @default(0)
  promotedUntil  DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  expiresAt   DateTime?
  deletedAt   DateTime?

  media         ListingMedia[]
  attributes    ListingAttribute[]
  favorites     Favorite[]
  conversations Conversation[]
  promoOrders   PromotionOrder[]

  adImpressions AdImpression[] @relation("ListingToAdImpressions") // inversa requerida

  @@index([status, publishedAt])
  @@index([categoryId, status, publishedAt])
  @@index([provinceId, cityId])
}

model ListingMedia {
  id        String   @id @default(uuid())
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  url       String
  position  Int
  width     Int?
  height    Int?
  mimeType  String?
  createdAt DateTime @default(now())

  @@index([listingId, position])
}

/**
 * Atributos por categoría (EAV)
 */
model ListingAttributeDef {
  id          String             @id @default(uuid())
  category    Category           @relation("CategoryToAttrDefs", fields: [categoryId], references: [id]) // relación nombrada
  categoryId  String
  name        String
  key         String
  dataType    String // text, number, boolean, enum
  enumOptions Json?
  isRequired  Boolean            @default(false)
  sortOrder   Int                @default(0)
  attributes  ListingAttribute[]

  @@unique([categoryId, key])
}

model ListingAttribute {
  id          String              @id @default(uuid())
  listing     Listing             @relation(fields: [listingId], references: [id])
  listingId   String
  attrDef     ListingAttributeDef @relation(fields: [attrDefId], references: [id])
  attrDefId   String
  valueText   String?
  valueNumber Decimal?            @db.Decimal(12, 2)
  valueBool   Boolean?

  @@unique([listingId, attrDefId])
}

/**
 * Sociales
 */
model Favorite {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  createdAt DateTime @default(now())

  @@id([userId, listingId])
}

model Conversation {
  id            String             @id @default(uuid())
  listing       Listing            @relation(fields: [listingId], references: [id])
  listingId     String
  buyer         User               @relation("buyer", fields: [buyerId], references: [id])
  buyerId       String
  seller        User               @relation("seller", fields: [sellerId], references: [id])
  sellerId      String
  lastMessageAt DateTime?
  status        ConversationStatus @default(open)
  createdAt     DateTime           @default(now())
  messages      Message[]

  @@unique([listingId, buyerId, sellerId])
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  body           String?
  mediaUrl       String?
  createdAt      DateTime     @default(now())
  readAt         DateTime?

  @@index([conversationId, createdAt])
}

/**
 * Moderación
 */
model Report {
  id          String       @id @default(uuid())
  reporter    User         @relation("reporter", fields: [reporterId], references: [id])
  reporterId  String
  targetType  ReportTarget
  targetId    String
  reason      String
  detailsText String?
  status      ReportStatus @default(open)
  createdAt   DateTime     @default(now())
  closedAt    DateTime?
  adminId     String?
}

/**
 * Promociones (destacados) y pagos
 */
model PromotionPlan {
  id           String           @id @default(uuid())
  code         String           @unique
  name         String
  description  String?
  type         PromotionType
  durationDays Int
  priceAmount  Decimal          @db.Decimal(12, 2)
  currency     String           @default("ARS")
  isActive     Boolean          @default(true)
  sortOrder    Int              @default(0)
  orders       PromotionOrder[]
}

model PromotionOrder {
  id          String        @id @default(uuid())
  buyer       User          @relation("buyerOrder", fields: [buyerId], references: [id])
  buyerId     String
  listing     Listing       @relation(fields: [listingId], references: [id])
  listingId   String
  plan        PromotionPlan @relation(fields: [planId], references: [id])
  planId      String
  status      String        @default("pending") // pending, paid, canceled, failed
  subtotal    Decimal       @db.Decimal(12, 2)
  tax         Decimal       @db.Decimal(12, 2)
  total       Decimal       @db.Decimal(12, 2)
  currency    String        @default("ARS")
  createdAt   DateTime      @default(now())
  paidAt      DateTime?
  externalRef String?
  metadata    Json?
  payments    Payment[]

  @@index([buyerId, createdAt])
}

model Payment {
  id                String         @id @default(uuid())
  promotionOrder    PromotionOrder @relation(fields: [promotionOrderId], references: [id])
  promotionOrderId  String
  provider          String
  providerPaymentId String
  status            PaymentStatus
  amount            Decimal        @db.Decimal(12, 2)
  currency          String         @default("ARS")
  receiptUrl        String?
  rawPayload        Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([provider, providerPaymentId])
}

/**
 * Publicidad interna
 */
model AdSlot {
  id          String   @id @default(uuid())
  code        String   @unique
  placement   String // home_top, category_sidebar, etc.
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  impressions AdImpression[] @relation("AdSlotToImpressions") // inversa requerida
}

model AdImpression {
  id       String @id @default(uuid())
  adSlot   AdSlot @relation("AdSlotToImpressions", fields: [adSlotId], references: [id])
  adSlotId String

  listing   Listing? @relation("ListingToAdImpressions", fields: [listingId], references: [id])
  listingId String?

  thirdPartyCampaignId String?
  occurredAt           DateTime @default(now())
  metadata             Json?
}
